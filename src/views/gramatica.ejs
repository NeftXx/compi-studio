<!DOCTYPE html>
<html lang="es">
  <head>
    <%- include('partials/head') -%>
    <style>
      blockquote {
        margin: 0 7px 0 5px;
        padding: 0 16px 0 10px;
        border-left-width: 5px;
        border-left-style: solid;
      }

      code {
        font-family: Menlo, Monaco, Consolas, "Droid Sans Mono", "Courier New",
          monospace, "Droid Sans Fallback";
        font-size: 1em;
        line-height: 1.357em;
      }

      body.wordWrap pre {
        white-space: pre-wrap;
      }

      pre:not(.hljs),
      pre.hljs code > div {
        padding: 16px;
        border-radius: 3px;
        overflow: auto;
      }

      pre code {
        color: var(--vscode-editor-foreground);
        tab-size: 4;
      }

      /** Theming */

      .vscode-light pre {
        background-color: rgba(220, 220, 220, 0.4);
      }

      .vscode-dark pre {
        background-color: rgba(10, 10, 10, 0.4);
      }

      .vscode-high-contrast pre {
        background-color: rgb(0, 0, 0);
      }

      .vscode-high-contrast h1 {
        border-color: rgb(0, 0, 0);
      }

      .vscode-light table > thead > tr > th {
        border-color: rgba(0, 0, 0, 0.69);
      }

      .vscode-dark table > thead > tr > th {
        border-color: rgba(255, 255, 255, 0.69);
      }

      .vscode-light h1,
      .vscode-light hr,
      .vscode-light table > tbody > tr + tr > td {
        border-color: rgba(0, 0, 0, 0.18);
      }

      .vscode-dark h1,
      .vscode-dark hr,
      .vscode-dark table > tbody > tr + tr > td {
        border-color: rgba(255, 255, 255, 0.18);
      }
    </style>

    <style>
      /* Tomorrow Theme */
      /* http://jmblog.github.com/color-themes-for-google-code-highlightjs */
      /* Original theme - https://github.com/chriskempson/tomorrow-theme */

      /* Tomorrow Comment */
      .hljs-comment,
      .hljs-quote {
        color: #8e908c;
      }

      /* Tomorrow Red */
      .hljs-variable,
      .hljs-template-variable,
      .hljs-tag,
      .hljs-name,
      .hljs-selector-id,
      .hljs-selector-class,
      .hljs-regexp,
      .hljs-deletion {
        color: #c82829;
      }

      /* Tomorrow Orange */
      .hljs-number,
      .hljs-built_in,
      .hljs-builtin-name,
      .hljs-literal,
      .hljs-type,
      .hljs-params,
      .hljs-meta,
      .hljs-link {
        color: #f5871f;
      }

      /* Tomorrow Yellow */
      .hljs-attribute {
        color: #eab700;
      }

      /* Tomorrow Green */
      .hljs-string,
      .hljs-symbol,
      .hljs-bullet,
      .hljs-addition {
        color: #718c00;
      }

      /* Tomorrow Blue */
      .hljs-title,
      .hljs-section {
        color: #4271ae;
      }

      /* Tomorrow Purple */
      .hljs-keyword,
      .hljs-selector-tag {
        color: #8959a8;
      }

      .hljs {
        display: block;
        overflow-x: auto;
        color: #4d4d4c;
        padding: 0.5em;
      }

      .hljs-emphasis {
        font-style: italic;
      }

      .hljs-strong {
        font-weight: bold;
      }
    </style>

    <style>
      /*
 * Markdown PDF CSS
 */
      pre {
        background-color: #f8f8f8;
        border: 1px solid #cccccc;
        border-radius: 3px;
        overflow-x: auto;
        white-space: pre-wrap;
        overflow-wrap: break-word;
      }

      pre:not(.hljs) {
        padding: 23px;
        line-height: 19px;
      }

      blockquote {
        background: rgba(127, 127, 127, 0.1);
        border-color: rgba(0, 122, 204, 0.5);
      }

      .emoji {
        height: 1.4em;
      }

      code {
        font-size: 14px;
        line-height: 19px;
      }

      /* for inline code */
      :not(pre):not(.hljs) > code {
        color: #c9ae75; /* Change the old color so it seems less like an error */
        font-size: inherit;
      }

      /* Page Break : use <div class="page"/> to insert page break
-------------------------------------------------------- */
      .page {
        page-break-after: always;
      }
    </style>

    <script src="https://unpkg.com/mermaid/dist/mermaid.min.js"></script>
  </head>
  <body>
    <script>
      mermaid.initialize({
        startOnLoad: true,
        theme:
          document.body.classList.contains("vscode-dark") ||
          document.body.classList.contains("vscode-high-contrast")
            ? "dark"
            : "default",
      });
    </script>
    <%- include('partials/menu') -%>
    <main>
      <div class="container" style="width: 95%;">
        <div>
          <h3 id="gram%C3%A1tica">Gramática</h2>
          <h4 id="expresiones-regulares-usados">
            <a
              href="#expresiones-regulares-usados"
              aria-hidden="true" class="header-anchor"># </a>
            Expresiones regulares usados
          </h4>
          <hr>
          <div class="card">
            <div class="card-content">
          
          <table>
            <thead>
              <tr>
                <th>Nombre</th>
                <th>Expresion</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>EndOfLine</td>
                <td>\r|\n|\r\n</td>
              </tr>
              <tr>
                <td>Identifier</td>
                <td>[a-zA-Z_][_a-za-z0-9ññ]*</td>
              </tr>
              <tr>
                <td>IntegerLiteral</td>
                <td>[0-9]+</td>
              </tr>
              <tr>
                <td>BooleanLiteral</td>
                <td>true|false</td>
              </tr>
              <tr>
                <td>NullLiteral</td>
                <td>null</td>
              </tr>
              <tr>
                <td>File</td>
                <td>[a-zA-Z0-9_-]+(.[A-Za-z0-9]+)*(.[j])</td>
              </tr>
              <tr>
                <td>Comentario Multilinea</td>
                <td>
                  [/][<em>][^</em>]<em>[</em>]+([^<em>/][^</em>]<em>[</em>]+)*[/]
                </td>
              </tr>
              <tr>
                <td>Comentario de una linea</td>
                <td>&quot;/&quot;.*</td>
              </tr>
            </tbody>
          </table>
        </div>
        </div>
          <h4 id="precedencia-utilizada">
            <a
              href="#precedencia-utilizada"
              aria-hidden="true" class="header-anchor"># </a
          >Precedencia utilizada</h4>
          <hr>
          <div class="card">
            <div class="card-content">
          <table>
            <thead>
              <tr>
                <th>Nivel</th>
                <th>Operador</th>
                <th>Descripción</th>
                <th>Asociatividad</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>12</td>
                <td>[]<br />.<br />()</td>
                <td>
                  Acceso a elemento de arreglo<br />
                  Acceso a elemento de estructura<br />Paréntesis
                </td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>11</td>
                <td>++<br />--</td>
                <td>
                  Post-incremento unario<br />
                  Post-incremento unario
                </td>
                <td>No asociativo</td>
              </tr>
              <tr>
                <td>10</td>
                <td>!<br />-<br />$</td>
                <td>
                  Not lógico unario<br />
                  Menos unario<br />Paso por valor de objetos
                </td>
                <td>De derecha a izquierda</td>
              </tr>
              <tr>
                <td>9</td>
                <td>()<br />strc</td>
                <td>Casteo<br />Creación de estructuras</td>
                <td>De derecha a izquierda</td>
              </tr>
              <tr>
                <td>8</td>
                <td>^^</td>
                <td>Potencia</td>
                <td>De derecha a izquierda</td>
              </tr>
              <tr>
                <td>7</td>
                <td>* / %</td>
                <td>Multiplicativo</td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>6</td>
                <td>+-<br />+</td>
                <td>Aditivo<br />Concatenación de cadenas</td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>5</td>
                <td>&lt; &lt;= &gt; &gt;=</td>
                <td>Relacional</td>
                <td>No asociativo</td>
              </tr>
              <tr>
                <td>4</td>
                <td>!= == ===</td>
                <td>Igualdad</td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>3</td>
                <td>^</td>
                <td>Xor</td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>2</td>
                <td>&amp;&amp;</td>
                <td>And</td>
                <td>De izquierda a derecha</td>
              </tr>
              <tr>
                <td>1</td>
                <td>||</td>
                <td>Or</td>
                <td>De izquierda a derecha</td>
              </tr>
            </tbody>
          </table>
            </div>
          </div> 
          <h4
            id="enumeraci%C3%B3n-y-cantidad-de-s%C3%ADmbolos-terminales-y-no-terminales"
          >
            <a
            href="#enumeraci%C3%B3n-y-cantidad-de-s%C3%ADmbolos-terminales-y-no-terminales"
            aria-hidden="true" class="header-anchor"># </a>
            Enumeración y cantidad de símbolos terminales y no terminales
          </h4>
          <hr>
          <h5 id="terminales">Terminales</h5>
          <br>
          <div class="card">
            <div class="card-content">
          <table>
            <thead>
              <tr>
                <th>No.</th>
                <th>Terminal</th>
                <th>Descripción</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>1</td>
                <td>import</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>2</td>
                <td>switch</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>3</td>
                <td>continue</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>4</td>
                <td>private</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>5</td>
                <td>define</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>6</td>
                <td>integer</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>7</td>
                <td>var</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>8</td>
                <td>case</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>9</td>
                <td>return</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>10</td>
                <td>void</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>11</td>
                <td>as</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>12</td>
                <td>double</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>13</td>
                <td>const</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>14</td>
                <td>if</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>15</td>
                <td>default</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>16</td>
                <td>print</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>17</td>
                <td>for</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>18</td>
                <td>strc</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>19</td>
                <td>char</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>20</td>
                <td>global</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>21</td>
                <td>else</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>22</td>
                <td>break</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>23</td>
                <td>public</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>24</td>
                <td>while</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>25</td>
                <td>do</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>26</td>
                <td>boolean</td>
                <td>Palabra reservada</td>
              </tr>
              <tr>
                <td>27</td>
                <td>null_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>28</td>
                <td>boolean_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>29</td>
                <td>double_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>30</td>
                <td>integer_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>31</td>
                <td>char_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>32</td>
                <td>string_literal</td>
                <td>Literal</td>
              </tr>
              <tr>
                <td>33</td>
                <td>file</td>
                <td>Nombre</td>
              </tr>
              <tr>
                <td>34</td>
                <td>identifier</td>
                <td>Nombre</td>
              </tr>
              <tr>
                <td>35</td>
                <td>===</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>36</td>
                <td>^^</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>37</td>
                <td>++</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>38</td>
                <td>--</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>39</td>
                <td>!=</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>40</td>
                <td>==</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>41</td>
                <td>&gt;=</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>42</td>
                <td>&lt;=</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>43</td>
                <td>&amp;&amp;</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>44</td>
                <td>||</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>45</td>
                <td>:=</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>46</td>
                <td>+</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>47</td>
                <td>-</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>48</td>
                <td>*</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>49</td>
                <td>/</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>50</td>
                <td>%</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>51</td>
                <td>=</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>52</td>
                <td>&gt;</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>53</td>
                <td>&lt;</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>54</td>
                <td>$</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>55</td>
                <td>^</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>56</td>
                <td>!</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>57</td>
                <td>(</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>58</td>
                <td>)</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>59</td>
                <td>[</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>60</td>
                <td>]</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>61</td>
                <td>{</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>62</td>
                <td>}</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>63</td>
                <td>,</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>64</td>
                <td>?</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>65</td>
                <td>:</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>66</td>
                <td>;</td>
                <td>Separador</td>
              </tr>
              <tr>
                <td>67</td>
                <td>.</td>
                <td>Separador</td>
              </tr>
            </tbody>
          </table>
            </div>
          </div>
          <h5 id="no-terminales">No Terminales</h5>
          <br>
          <div class="card">
            <div class="card-content">
          <table>
            <thead>
              <tr>
                <th>No.</th>
                <th>No Terminal</th>
                <th>Descripción</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>1</td>
                <td>compilation_unit</td>
                <td>No terminal inicial de la gramatica</td>
              </tr>
              <tr>
                <td>2</td>
                <td>import_statement</td>
                <td>No terminal que devuelve los archivos importados</td>
              </tr>
              <tr>
                <td>3</td>
                <td>file_list</td>
                <td>Lista de nombre de archivos</td>
              </tr>
              <tr>
                <td>4</td>
                <td>global_statements_list</td>
                <td>Lista de sentencias globales</td>
              </tr>
              <tr>
                <td>5</td>
                <td>global_statement</td>
                <td>Devuelve una sentencia</td>
              </tr>
              <tr>
                <td>6</td>
                <td>function_statement</td>
                <td>Devuelve una el cuerpo de una funcion</td>
              </tr>
              <tr>
                <td>7</td>
                <td>type</td>
                <td>
                  Devuelve un tipo primitivo, tipo estructura o un tipo arreglo
                </td>
              </tr>
              <tr>
                <td>8</td>
                <td>primitive_type</td>
                <td>Deveulve un tipo primitivo</td>
              </tr>
              <tr>
                <td>9</td>
                <td>parameter_list</td>
                <td>Lista de parametros de una funcion</td>
              </tr>
              <tr>
                <td>10</td>
                <td>parameter</td>
                <td>Parametro de una funcion</td>
              </tr>
              <tr>
                <td>11</td>
                <td>block</td>
                <td>Bloque de sentencias</td>
              </tr>
              <tr>
                <td>12</td>
                <td>block_statement</td>
                <td>Cuerpo de un bloque de sentencias</td>
              </tr>
              <tr>
                <td>13</td>
                <td>statement</td>
                <td>Devuelve sentencia local</td>
              </tr>
              <tr>
                <td>14</td>
                <td>break_statement</td>
                <td>Devuelve sentencia break</td>
              </tr>
              <tr>
                <td>15</td>
                <td>continue_statement</td>
                <td>Devuelve sentencia continue</td>
              </tr>
              <tr>
                <td>16</td>
                <td>return_statement</td>
                <td>Devuelve sentencia return</td>
              </tr>
              <tr>
                <td>17</td>
                <td>struct_definition</td>
                <td>Definicion del cuerpo de una estructura</td>
              </tr>
              <tr>
                <td>18</td>
                <td>struct_declaration</td>
                <td>Una expresion que devuelve una estructura</td>
              </tr>
              <tr>
                <td>19</td>
                <td>attribute_list</td>
                <td>Lista de atributos de una estructura</td>
              </tr>
              <tr>
                <td>20</td>
                <td>attribute</td>
                <td>Atributo de una estructura</td>
              </tr>
              <tr>
                <td>21</td>
                <td>variable_declaration</td>
                <td>
                  Declaracion de una variable (var, global, constante y con
                  tipo)
                </td>
              </tr>
              <tr>
                <td>22</td>
                <td>id_list</td>
                <td>Lista de id, para la declaracion de una variable</td>
              </tr>
              <tr>
                <td>23</td>
                <td>var_assignment</td>
                <td>Asignacion de una variable</td>
              </tr>
              <tr>
                <td>24</td>
                <td>access_list</td>
                <td>Acceso a una variable, para asignarle un valor</td>
              </tr>
              <tr>
                <td>25</td>
                <td>do_while_statement</td>
                <td>Sentencia do while</td>
              </tr>
              <tr>
                <td>26</td>
                <td>while_statement</td>
                <td>Sentencia while</td>
              </tr>
              <tr>
                <td>27</td>
                <td>if_statement</td>
                <td>Sentencia if</td>
              </tr>
              <tr>
                <td>28</td>
                <td>if_list</td>
                <td>Lista de ifs</td>
              </tr>
              <tr>
                <td>29</td>
                <td>switch_statement</td>
                <td>Sentencia switch</td>
              </tr>
              <tr>
                <td>30</td>
                <td>switch_labels</td>
                <td>Lista de casos</td>
              </tr>
              <tr>
                <td>31</td>
                <td>switch_label</td>
                <td>Casos (case y default)</td>
              </tr>
              <tr>
                <td>32</td>
                <td>for_statement</td>
                <td>Sentencia for</td>
              </tr>
              <tr>
                <td>33</td>
                <td>for_init</td>
                <td>Declaracion de variable y asignacion dentro de un for</td>
              </tr>
              <tr>
                <td>34</td>
                <td>for_conditional</td>
                <td>Condicion del for</td>
              </tr>
              <tr>
                <td>35</td>
                <td>for_final</td>
                <td>Aumento del for</td>
              </tr>
              <tr>
                <td>36</td>
                <td>print_statement</td>
                <td>Sentencia print</td>
              </tr>
              <tr>
                <td>37</td>
                <td>call_function</td>
                <td>Llamada de una funcion</td>
              </tr>
              <tr>
                <td>38</td>
                <td>expression_list</td>
                <td>
                  Lista de expresiones usada para las llamadas y creacion de
                  arreglos
                </td>
              </tr>
              <tr>
                <td>39</td>
                <td>array_values</td>
                <td>Creacion de arreglos</td>
              </tr>
              <tr>
                <td>40</td>
                <td>expression</td>
                <td>Expresiones del lenguaje</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
          <h4 id="gram%C3%A1tica-funcional">
            <a
              href="#gram%C3%A1tica-funcional"
              aria-hidden="true" class="header-anchor"># </a>
            Gramática funcional
          </h4>
          <hr>
          <pre class="hljs"><code><div>&lt;compilation_unit&gt;
        : &lt;import_statement&gt; &lt;global_statements_list&gt; {
          compilation_unit.cad = concat(import_statement.cad, global_statements_list.cad);
        }
        | &lt;global_statements_list&gt; {
          compilation_unit.cad = global_statements_list.cad;
        }
      ;
      
      &lt;import_statement&gt;
        : <span class="hljs-keyword">import</span> &lt;file_list&gt; { import_statement.cad = file_list.cad; }
      ;
      
      &lt;file_list&gt;
        : &lt;file_list&gt; , file {
          file_list.temp = concat(file_list1.temp, file.temp);
          file_list.cad = concat(file_list1.cad, file.cad);
        }
        | file {
          file_list.temp = obtener_temporales(file);
          file_list.cad = obtener_codigo(file);
        }
      ;
      
      &lt;global_statements_list&gt;
        : &lt;global_statements_list&gt; &lt;global_statement&gt; {
          global_statements_list.cad = concat(global_statements_list1.cad, global_statement.cad);
        }
        | &lt;global_statement&gt; {
          global_statements_list.cad = global_statement.cad;
        }
      ;
      
      &lt;global_statement&gt;
        : &lt;function_statement&gt; { global_statement.cad = function_statement.cad; }
        | &lt;struct_definition&gt; { global_statement.cad = struct_definition.cad; }
        | &lt;variable_declaration&gt; { global_statement.cad = variable_declaration.cad; }
      ;
      
      &lt;function_statement&gt;
        : <span class="hljs-function">type <span class="hljs-title">identifier</span> <span class="hljs-params">( &lt;parameter_list&gt; )</span> &lt;block&gt; </span>{
          function_statement.cad = concat(<span class="hljs-string">"proc "</span>, identifier, <span class="hljs-string">"begin"</span>, parameter_list.cad,  block.cad, <span class="hljs-string">"end"</span>);
        }
        | <span class="hljs-function">type <span class="hljs-title">identifier</span> <span class="hljs-params">( )</span> &lt;block&gt; </span>{
          function_statement.cad = concat(<span class="hljs-string">"proc "</span>, identifier, <span class="hljs-string">"begin"</span>, block.cad, <span class="hljs-string">"end"</span>);
        }
        | <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">identifier</span> <span class="hljs-params">( &lt;parameter_list&gt; )</span> &lt;block&gt; </span>{
          function_statement.cad = concat(<span class="hljs-string">"proc "</span>, identifier, <span class="hljs-string">"begin"</span>, parameter_list.cad,  block.cad, <span class="hljs-string">"end"</span>);
        }
        | <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">identifier</span> <span class="hljs-params">( )</span> &lt;block&gt; </span>{
          function_statement.cad = concat(<span class="hljs-string">"proc "</span>, identifier, <span class="hljs-string">"begin"</span>, block.cad, <span class="hljs-string">"end"</span>);
        }
      ;
      
      &lt;type&gt;
        : &lt;primitive_type&gt; { type.tipo = primitive_type.tipo; }
        | identifier { type.tipo = crearTipoEstructura(identifier); }
        | &lt;primitive_type&gt; [ ] { type.tipo = crearTipoArreglo(primitive_type.tipo); }
        | identifier [ ] { type.tipo = crearTipoArreglo(crearTipoEstructura(identifier)); }
      ;
      
      &lt;primitive_type&gt;
        : integer { primitive_type.tipo = <span class="hljs-string">"integer"</span>; }
        | <span class="hljs-keyword">double</span> { primitive_type.tipo = <span class="hljs-string">"double"</span>; }
        | <span class="hljs-keyword">char</span> { primitive_type.tipo = <span class="hljs-string">"char"</span>; }
        | <span class="hljs-keyword">boolean</span> { primitive_type.tipo = <span class="hljs-string">"boolean"</span>; }
      ;
      
      &lt;parameter_list&gt;
        : &lt;parameter_list&gt; , &lt;parameter&gt; { parameter_list.cad = concat(paramter_list.cad, parameter.cad); }
        | &lt;parameter&gt; { parameter_list.cad = parameter.cad; }
      ;
      
      &lt;parameter&gt;
        : &lt;type&gt; identifier {
          <span class="hljs-keyword">var</span> dir = obtenerDireccion(identifier);
          <span class="hljs-keyword">var</span> valor = obtenerValor(identifier);
          parameter.cad = concat(<span class="hljs-string">"Stack["</span>, dir, <span class="hljs-string">"] = "</span>, valor);
        }
      ;
      
      &lt;block&gt;
        : {  &lt;block_statement&gt; } { block.cad = block_statement.cad; }
      ;
      
      &lt;block_statement&gt;
        : &lt;block_statement&gt; &lt;statement&gt; {
          block_statement.cad = concat(block_statement.cad, statement.cad);
        }
        | &lt;statement&gt; { block_statement.cad = statement.cad; }
      ;
      
      &lt;statement&gt;
        : &lt;print_statement&gt; { statement.cad = print_statement.cad; }
        | &lt;if_statement&gt; { statement.cad = if_statement.cad; }
        | &lt;switch_statement&gt; { statement.cad = switch_statement.cad; }
        | &lt;while_statement&gt; { statement.cad = while_statement.cad; }
        | &lt;do_while_statement&gt; { statement.cad = do_while_statement.cad; }
        | &lt;struct_definition&gt; { statement.cad = struct_definition.cad; }
        | &lt;var_assignment&gt; { statement.cad = var_assignment.cad; }
        | &lt;variable_declaration&gt; { statement.cad = variable_declaration.cad; }
        | &lt;break_statement&gt; { statement.cad = break_statement.cad; }
        | &lt;continue_statement&gt; { statement.cad = continue_statement.cad; }
        | &lt;return_statement&gt; { statement.cad = return_statement.cad; }
        | &lt;for_statement&gt; { statement.cad = for_statement.cad; }
        | &lt;call_function_statement&gt; { statement.cad = call_function_statement.cad; }
      ;
      
      &lt;break_statement&gt;
        : <span class="hljs-keyword">break</span> {
          <span class="hljs-keyword">var</span> salto = obtenerBreak();
          break_statement.cad = concat(<span class="hljs-string">"goto "</span>, salto, <span class="hljs-string">";"</span>);
        }
      ;
      
      &lt;continue_statement&gt;
        : <span class="hljs-keyword">continue</span> {
          <span class="hljs-keyword">var</span> salto = obtenerContinue();
          continue_statement.cad = concat(<span class="hljs-string">"goto"</span>, salto, <span class="hljs-string">";"</span>);
        }
      ;
      
      &lt;return_statement&gt;
        : <span class="hljs-keyword">return</span> {
          <span class="hljs-keyword">var</span> salto = obtenerReturn();
          return_statement.cad = concat(<span class="hljs-string">"goto"</span>, salto, <span class="hljs-string">";"</span>);
        }
        | <span class="hljs-keyword">return</span> &lt;expression&gt; {
          <span class="hljs-keyword">var</span> salto = obtenerReturn();
          return_statement.cad = concat(expression.cad, <span class="hljs-string">"goto"</span>, salto, <span class="hljs-string">";"</span>);
        }
      ;
      
      &lt;struct_definition&gt;
        : define identifier as [ &lt;attribute_list&gt; ] {
          guardarEstructura(identifier, attribute_list.lista);
        }
      ;
      
      &lt;struct_declaration&gt;
        : strc &lt;primitive_type&gt; [ &lt;expression&gt; ] {
          <span class="hljs-keyword">var</span> estructura = crearArreglo(primitive_type.tipo);
          struct_declaration.cad = estructura.cad;
          struct_declaration.dir = estructura.dir;
        }
        | strc identifier [ &lt;expression&gt; ] {
          <span class="hljs-keyword">var</span> estructura = crearArreglo(crearTipoEstructura(identifier));
          struct_declaration.cad = estructura.cad;
          struct_declaration.dir = estructura.dir;
        }
        | <span class="hljs-function">strc <span class="hljs-title">identifier</span> <span class="hljs-params">( )</span> </span>{
          <span class="hljs-keyword">var</span> estructura = crearEstructura(identifier);
          struct_declaration.cad = estructura.cad;
          struct_declaration.dir = estructura.dir;
        }
      ;
      
      &lt;attribute_list&gt;
        : &lt;attribute_list&gt; , &lt;attribute&gt; {
          attribute_list.lista = attribute_list1.lista;
          attribute_list.agregar(attribute.val);
        }
        | &lt;attribute&gt; {
          attribute_list.lista = [attribute.val];
        }
      ;
      
      &lt;attribute&gt;
        : &lt;type&gt; identifier {
          attribute.val = crearAtributo(type.tipo, identifier);
        }
        | &lt;type&gt; identifier = &lt;expression&gt; {
          attribute.val = crearAtributo(type.tipo, identifier, exp);
        }
      ;
      
      &lt;variable_declaration&gt;
        : &lt;type&gt; &lt;id_list&gt; = &lt;expression&gt; {
          guardar_en_stack(id_list);
        }
        | &lt;type&gt; &lt;id_list&gt; {
          guardar_en_stack(id_list);
        }
        | <span class="hljs-keyword">var</span> identifier := &lt;expression&gt; {
          guardar_en_stack(identifier, expression);
        }
        | <span class="hljs-keyword">const</span> identifier := &lt;expression&gt; {
          guardar_en_stack(identifier, expression);
        }
        | global identifier := &lt;expression&gt; {
          guardar_en_heap(identifier, expression);
        }
      ;
      
      &lt;id_list&gt;
        : &lt;id_list&gt; , identifier { id_list = id_list1; id_list.agregar(identifier); }
        | identifier { id_list = []; id_list.agregar(identifier); }
      ;
      
      &lt;var_assignment&gt;
        : &lt;access_list&gt; = &lt;expression&gt;
        | &lt;access_list&gt; ++
        | &lt;access_list&gt; --
      ;
      
      &lt;access_list&gt;
        : &lt;access_list&gt; . identifier
        | &lt;access_list&gt; [ &lt;expression&gt; ]
        | identifier {
          <span class="hljs-keyword">var</span> variable = buscar_stack(identifier);
          <span class="hljs-keyword">if</span> (variable == <span class="hljs-keyword">null</span>) {
            variable = buscar_heap(identifier);
            access_list.dir = nuevoTemporal();
            access_list.cad = concat(access_list.dir, <span class="hljs-string">" = heap["</span>, variable.dir, <span class="hljs-string">"];"</span>);
          } <span class="hljs-keyword">else</span> {
            variable = buscar_stack(identifier);
            access_list.dir = nuevoTemporal();
            access_list.cad = concat(access_list.dir, <span class="hljs-string">" = stack["</span>, variable.dir, <span class="hljs-string">"];"</span>);
          }
        }
      ;
      
      &lt;do_while_statement&gt;
        : <span class="hljs-keyword">do</span> &lt;block&gt; <span class="hljs-keyword">while</span> ( &lt;expression&gt; ) {
          <span class="hljs-keyword">var</span> salto = nuevoSalto();
          do_while_statement.cad = concat(salto, block.cad,
            expression.cad, expression.LV, <span class="hljs-string">"goto "</span>, salto, <span class="hljs-string">";"</span>, expression.LF);
          );
        }
      ;
      
      &lt;while_statement&gt;
        : <span class="hljs-keyword">while</span> ( &lt;expression&gt; ) &lt;block&gt; {
          <span class="hljs-keyword">var</span> salto = nuevoSalto();
        }
      ;
      
      &lt;if_statement&gt;
        : &lt;if_list&gt; <span class="hljs-keyword">else</span> &lt;block&gt;
        | &lt;if_list&gt;
      ;
      
      &lt;if_list&gt;
        : &lt;if_list&gt; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( &lt;expression&gt; ) &lt;block&gt;
        | <span class="hljs-keyword">if</span> ( &lt;expression&gt; ) &lt;block&gt;
      ;
      
      &lt;switch_statement&gt;
        : <span class="hljs-keyword">switch</span> ( &lt;expression&gt; ) { &lt;switch_labels&gt; }
      ;
      
      &lt;switch_labels&gt;
        : &lt;switch_labels&gt; &lt;switch_label&gt;
        | &lt;switch_label&gt;
      ;
      
      &lt;switch_label&gt;
        : <span class="hljs-keyword">case</span> &lt;expression&gt; : &lt;block_statement&gt;
        | <span class="hljs-keyword">default</span> : &lt;block_statement&gt;
      ;
      
      &lt;for_statement&gt;
        : <span class="hljs-keyword">for</span> ( &lt;for_init&gt; ; &lt;for_conditional&gt; ; &lt;for_final&gt; ) &lt;block&gt;
      ;
      
      &lt;for_init&gt;
        : &lt;variable_declaration&gt;
        | &lt;var_assignment&gt;
        | <span class="hljs-comment">/* epsilon */</span>
      ;
      
      &lt;for_conditional&gt;
        : &lt;expression&gt;
        | <span class="hljs-comment">/* epsilon */</span>
      ;
      
      &lt;for_final&gt;
        : &lt;var_assignment&gt;
        | <span class="hljs-comment">/* epsilon */</span>
      ;
      
      &lt;print_statement&gt;
        : print ( &lt;expression&gt; )
      ;
      
      &lt;call_function&gt;
        : identifier ( &lt;expression_list&gt; )
        | identifier ( )
      ;
      
      &lt;expression_list&gt;
        : &lt;expression_list&gt; , &lt;expression&gt;
        | &lt;expression&gt;
      ;
      
      &lt;array_values&gt;
        : { &lt;expression_list&gt; }
      ;
      
      &lt;expression&gt;
        : &lt;expression&gt; &amp;&amp; &lt;expression&gt; {
      
        }
        | &lt;expression&gt; || &lt;expression&gt; {
      
        }
        | &lt;expression&gt; ^ &lt;expression&gt; {
      
        }
        | ! &lt;expression&gt; {
      
        }
        | &lt;expression&gt; ^^ &lt;expression&gt; {
      
        }
        | &lt;expression&gt; + &lt;expression&gt; {
      
        }
        | &lt;expression&gt; - &lt;expression&gt; {
      
        }
        | &lt;expression&gt; * &lt;expression&gt; {
      
        }
        | &lt;expression&gt; / &lt;expression&gt; {
      
        }
        | &lt;expression&gt; % &lt;expression&gt; {
      
        }
        | &lt;expression&gt; &gt; &lt;expression&gt; {
      
        }
        | &lt;expression&gt; &gt;= &lt;expression&gt; {
      
        }
        | &lt;expression&gt; &lt; &lt;expression&gt; {
      
        }
        | &lt;expression&gt; &lt;= &lt;expression&gt; {
      
        }
        | &lt;expression&gt; === &lt;expression&gt; {
      
        }
        | &lt;expression&gt; == &lt;expression&gt; {
      
        }
        | &lt;expression&gt; != &lt;expression&gt; {
      
        }
        | ( &lt;primitive_type&gt; ) &lt;expression&gt; {
      
        }
        | ( &lt;expression&gt; ) {
      
        }
        | &lt;expression&gt; . identifier {
      
        }
        | &lt;expression&gt; . identifier ( ) {
      
        }
        | &lt;expression&gt; . identifier ( &lt;expression&gt; ) {
      
        }
        | &lt;expression&gt; [ &lt;expression&gt; ] {
      
        }
        | &lt;expression&gt; ++ {
      
        }
        | &lt;expression&gt; -- {
          <span class="hljs-keyword">var</span> temporal = nuevoTemporal();
          <span class="hljs-keyword">var</span> ultimaDir = obtenerUltimo();
          expression.dir = expression1.dir;
        }
        | - &lt;expression&gt; {
          <span class="hljs-keyword">var</span> temporal = nuevoTemporal();
          expression.dir = temporal;
          expression.cad = concat(expression.cad1, temporal, <span class="hljs-string">"= -"</span>, expression.dir);
      
        }
        | $ &lt;expression&gt; {
          expression.cad = expression1.cad;
          expression.dir = expression1.dir;
        }
        | &lt;array_values&gt; {
          expression.cad = array_values.cad;
          expression.dir = array_values.dir;
        }
        | &lt;call_function&gt; {
          expression.cad = call_function.cad;
          expression.dir = call_functino.dir;
        }
        | &lt;struct_declaration&gt; {
          expression.cad = struct_declaration.cad;
          expression.dir = struct_declaration.dir;
        }
        | char_literal {
          expression.dir = char_literal.chartAt(i);
          expressin.cad = <span class="hljs-string">""</span>;
        }
        | string_literal {
          <span class="hljs-keyword">var</span> tam = string_literal.length;
          <span class="hljs-keyword">var</span> temporal = nuevoTempora();
          expression.cad = concat(temporal, <span class="hljs-string">" = H;"</span>);
          <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; tam; i++) {
            expression.cad = concat(expression.cad, <span class="hljs-string">"Heap[H] = "</span>, string_literal.charAt(i), <span class="hljs-string">";"</span>);
            expression.cad = concat(expresion.cad, <span class="hljs-string">"H = H + 1;"</span>);
          }
        }
        | double_literal {
          expression.dir = double_literal;
        }
        | integer_literal {
          expression.dir = integer_literal;
        }
        | boolean_literal {
          <span class="hljs-keyword">var</span> salto = nuevoSalto();
          expression.dir = <span class="hljs-string">""</span>;
          expression.cad = concat(<span class="hljs-string">"goto "</span>, salto, <span class="hljs-string">";"</span>);
          <span class="hljs-keyword">if</span> (boolean_literal == <span class="hljs-string">"true"</span>) {
            expression.LV = salto
          } <span class="hljs-keyword">else</span> {
            expression.LF = salto;
          }
        }
        | null_literal { expression.cad = <span class="hljs-string">""</span>; expression.dir = <span class="hljs-string">"-1"</span>;}
        | identifier { expression.cad = <span class="hljs-string">""</span>; expression.dir = obtener_valor(identifier); }
      ;
      
      </div></code></pre>
        </div>
      </div>
    </main>
    <%- include('partials/footer') -%>
  </body>
  <%- include('partials/script') -%>
</html>
