/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,10],$V2=[1,14],$V3=[1,15],$V4=[1,18],$V5=[1,19],$V6=[1,20],$V7=[1,21],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[6,17,22,23,24,27,28,29,30,46,48,49],$Vc=[17,22,27,28,29,30],$Vd=[17,22,23,24,27,28,29,30,46,48,49],$Ve=[9,10,17,22,23,24,27,28,29,30,46,48,49],$Vf=[2,52],$Vg=[2,6,9,17,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55],$Vh=[1,63],$Vi=[1,57],$Vj=[1,58],$Vk=[1,59],$Vl=[1,60],$Vm=[1,61],$Vn=[1,62],$Vo=[1,75],$Vp=[1,77],$Vq=[10,20],$Vr=[1,79],$Vs=[1,80],$Vt=[1,81],$Vu=[1,82],$Vv=[1,83],$Vw=[1,84],$Vx=[1,85],$Vy=[1,86],$Vz=[1,87],$VA=[1,88],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[2,6,9,17,20,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$VF=[1,110],$VG=[1,114],$VH=[1,113],$VI=[1,116],$VJ=[1,111],$VK=[2,6,17,22,23,24,27,28,29,30,37,46,48,49,50,51,53,54,55],$VL=[2,17,27,28,29,30,37,46,48,49,50,51,54,55],$VM=[2,6,9,17,20,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55,56,58,59,60,61,62,63,64,65,66,67,68],$VN=[2,6,9,17,20,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55,56,58,59,63,64,65,66,67,68],$VO=[2,6,9,17,20,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55,56,67,68],$VP=[2,17,27,28,29,30,37,46,48,49,50,51,53,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"compilation_unit":3,"import_statement":4,"global_statements_list":5,"EOF":6,"import":7,"file_list":8,";":9,",":10,"FILE":11,"global_statement":12,"function_statement":13,"variable_declaration":14,"visibility":15,"type":16,"IDENTIFIER":17,"(":18,"parameter_list":19,")":20,"block":21,"void":22,"public":23,"private":24,"primitive_type":25,"reference_type":26,"integer":27,"double":28,"char":29,"boolean":30,"array_type":31,"[":32,"]":33,"parameter":34,"{":35,"block_statement":36,"}":37,"statement":38,"print_statement":39,"if_statement":40,"while_statement":41,"do_while_statement":42,"id_list":43,"=":44,"expression":45,"var":46,":=":47,"const":48,"global":49,"do":50,"while":51,"if_list":52,"else":53,"if":54,"print":55,"&&":56,"^^":57,"+":58,"-":59,"*":60,"/":61,"%":62,">":63,">=":64,"<":65,"<=":66,"==":67,"!=":68,"STRING_LITERAL":69,"DOUBLE_LITERAL":70,"INTEGER_LITERAL":71,"BOOLEAN_LITERAL":72,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"import",9:";",10:",",11:"FILE",17:"IDENTIFIER",18:"(",20:")",22:"void",23:"public",24:"private",27:"integer",28:"double",29:"char",30:"boolean",32:"[",33:"]",35:"{",37:"}",44:"=",46:"var",47:":=",48:"const",49:"global",50:"do",51:"while",53:"else",54:"if",55:"print",56:"&&",57:"^^",58:"+",59:"-",60:"*",61:"/",62:"%",63:">",64:">=",65:"<",66:"<=",67:"==",68:"!=",69:"STRING_LITERAL",70:"DOUBLE_LITERAL",71:"INTEGER_LITERAL",72:"BOOLEAN_LITERAL"},
productions_: [0,[3,3],[3,2],[4,2],[4,3],[8,3],[8,1],[5,2],[5,1],[12,1],[12,1],[12,2],[13,7],[13,6],[13,7],[13,6],[13,6],[13,5],[13,6],[13,5],[15,1],[15,1],[16,1],[16,1],[25,1],[25,1],[25,1],[25,1],[26,1],[31,3],[31,3],[31,3],[19,3],[19,1],[34,2],[21,3],[21,2],[36,2],[36,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,2],[38,2],[14,4],[14,4],[14,4],[14,4],[14,2],[43,3],[43,1],[42,6],[42,7],[41,5],[40,3],[40,1],[52,7],[52,5],[39,4],[39,5],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,1],[45,1],[45,1],[45,1],[45,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return new Ast($$[$0-1], yy.filename, $$[$0-2]);
  
break;
case 2:

    return new Ast($$[$0-1], yy.filename);
  
break;
case 3:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 4:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 5: case 32:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 6: case 33:
 this.$ = [$$[$0]]; 
break;
case 7: case 37:

    this.$ = $$[$0-1];
    if ($$[$0]) this.$.push($$[$0]);
  
break;
case 8: case 38:

    this.$ = [];
    if ($$[$0]) this.$.push($$[$0]);
  
break;
case 9: case 10: case 22: case 23: case 39: case 40: case 41: case 42: case 43:
 this.$ = $$[$0]; 
break;
case 11: case 44: case 75:
 this.$ = $$[$0-1]; 
break;
case 12: case 16:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 13: case 17:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-3], [], $$[$0]
    );
  
break;
case 14: case 18:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 15: case 19:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-3], [], $$[$0]
    );
  
break;
case 24:
 this.$ = yy.typeFactory.getInteger(); 
break;
case 25:
 this.$ = yy.typeFactory.getDouble();  
break;
case 26:
 this.$ = yy.typeFactory.getChar();    
break;
case 27:
 this.$ = yy.typeFactory.getBoolean(); 
break;
case 34:

    this.$ = new ParameterStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 35:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 36:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), []
    );
  
break;
case 46:

    this.$ = new VarDeclarationType(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-2], $$[$0]
    );
  
break;
case 47:

    this.$ = new VarDeclaration(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), false, $$[$0-2], $$[$0]
    );
  
break;
case 48:

    this.$ = new VarDeclaration(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), true, $$[$0-2], $$[$0]
    );
  
break;
case 49:

    this.$ = new VarDeclarationGlobal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 50:

    this.$ = new VarDeclarationType(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 53:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-1]
    );
  
break;
case 54:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-2]
    );
  
break;
case 55:

    this.$ = new WhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 56:

    $$[$0-2].push(new SubIf(
      new NodeInfo(
        yy.filename, _$[$0-2].first_line, _$[$0-2].first_column
      ), $$[$0]));
    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0-2]
      );
  
break;
case 57:

    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0]
      );
  
break;
case 58:

    this.$ = $$[$0-6];
    this.$.push(new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2]));
  
break;
case 59:

    this.$ = [new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2])];
  
break;
case 60:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 61:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
  
break;
case 62:

    this.$ = new And(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 63:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "^^", $$[$0]
    );
  
break;
case 64:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "+", $$[$0]
    );
  
break;
case 65:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "-", $$[$0]
    );
  
break;
case 66:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "*", $$[$0]
    );
  
break;
case 67:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "/", $$[$0]
    );
  
break;
case 68:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "%", $$[$0]
    );
  
break;
case 69:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">", $$[$0]
    )
  
break;
case 70:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">=", $$[$0]
    )
  
break;
case 71:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<", $$[$0]
    )
  
break;
case 72:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<=", $$[$0]
    )
  
break;
case 73:

    this.$ = new Comparator(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "==", $$[$0]
    )
  
break;
case 74:

    this.$ = new Comparator(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "!=", $$[$0]
    )
  
break;
case 76:

    this.$ = new UMenos(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    )
  
break;
case 77:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getString(), $$[$0]
    );
  
break;
case 78:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getDouble(), Number($$[$0])
    );
  
break;
case 79:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getInteger(), Number($$[$0])
    );
  
break;
case 80:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getBoolean(), $$[$0].toLowerCase() === "true"
    );
  
break;
case 81:

    this.$ = new Identifier(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
}
},
table: [{3:1,4:2,5:3,7:[1,4],12:5,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:$V2,24:$V3,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,46:$V8,48:$V9,49:$Va},{1:[3]},{5:23,12:5,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:$V2,24:$V3,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,46:$V8,48:$V9,49:$Va},{6:[1,24],12:25,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:$V2,24:$V3,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,46:$V8,48:$V9,49:$Va},{8:26,11:[1,27]},o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10],{9:[1,28]}),{16:29,17:$V0,22:[1,30],25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7},{17:[1,31],43:32},{17:[1,33]},{17:[1,34]},{17:[1,35]},{17:[1,36]},o($Vc,[2,20]),o($Vc,[2,21]),{17:[2,22]},{17:[2,23]},{17:[2,24]},{17:[2,25]},{17:[2,26]},{17:[2,27]},{17:[2,28]},{6:[1,37],12:25,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:$V2,24:$V3,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,46:$V8,48:$V9,49:$Va},{1:[2,2]},o($Vb,[2,7]),o($Vd,[2,3],{9:[1,38],10:[1,39]}),o($Ve,[2,6]),o($Vb,[2,11]),{17:[1,40]},{17:[1,41]},o([6,9,10,17,22,23,24,27,28,29,30,44,46,48,49],$Vf,{18:[1,42]}),o($Vg,[2,50],{10:[1,44],44:[1,43]}),{18:[1,45]},{47:[1,46]},{47:[1,47]},{47:[1,48]},{1:[2,1]},o($Vd,[2,4]),{11:[1,49]},{18:[1,50]},{18:[1,51]},{16:55,17:$V0,19:52,20:[1,53],25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,34:54},{17:$Vh,18:$Vi,45:56,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:[1,64]},{16:55,17:$V0,19:65,20:[1,66],25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,34:54},{17:$Vh,18:$Vi,45:67,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:68,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:69,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},o($Ve,[2,5]),{16:55,17:$V0,19:70,20:[1,71],25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,34:54},{16:55,17:$V0,19:72,20:[1,73],25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,34:54},{10:$Vo,20:[1,74]},{21:76,35:$Vp},o($Vq,[2,33]),{17:[1,78]},o($Vg,[2,46],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),{17:$Vh,18:$Vi,45:92,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:93,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},o($VE,[2,77]),o($VE,[2,78]),o($VE,[2,79]),o($VE,[2,80]),o($VE,[2,81]),o([2,6,9,10,17,22,23,24,27,28,29,30,37,44,46,48,49,50,51,54,55],[2,51]),{10:$Vo,20:[1,94]},{21:95,35:$Vp},o($Vg,[2,47],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($Vg,[2,48],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($Vg,[2,49],{56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),{10:$Vo,20:[1,96]},{21:97,35:$Vp},{10:$Vo,20:[1,98]},{21:99,35:$Vp},{21:100,35:$Vp},{16:55,17:$V0,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,34:101},o($Vb,[2,17]),{2:$VF,14:109,16:115,17:$V0,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,36:102,37:[1,103],38:104,39:105,40:106,41:107,42:108,46:$V8,48:$V9,49:$Va,50:$VG,51:$VH,52:112,54:$VI,55:$VJ},o($Vq,[2,34]),{17:$Vh,18:$Vi,45:117,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:118,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:119,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:120,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:121,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:122,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:123,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:124,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:125,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:126,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:127,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:128,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{17:$Vh,18:$Vi,45:129,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{20:[1,130],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},o($VE,[2,76]),{21:131,35:$Vp},o($Vb,[2,19]),{21:132,35:$Vp},o($Vb,[2,13]),{21:133,35:$Vp},o($Vb,[2,15]),o($Vb,[2,16]),o($Vq,[2,32]),{2:$VF,14:109,16:115,17:$V0,25:16,26:17,27:$V4,28:$V5,29:$V6,30:$V7,37:[1,134],38:135,39:105,40:106,41:107,42:108,46:$V8,48:$V9,49:$Va,50:$VG,51:$VH,52:112,54:$VI,55:$VJ},o($VK,[2,36]),o($VL,[2,38]),o($VL,[2,39]),o($VL,[2,40]),o($VL,[2,41]),o($VL,[2,42]),o($VL,[2,43],{9:[1,136]}),{9:[1,137]},{18:[1,138]},o($VL,[2,57],{53:[1,139]}),{18:[1,140]},{21:141,35:$Vp},{17:[1,142],43:32},{18:[1,143]},o([2,6,9,17,20,22,23,24,27,28,29,30,37,46,48,49,50,51,54,55,56],[2,62],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD}),o($VM,[2,63],{57:$Vs}),o($VN,[2,64],{57:$Vs,60:$Vv,61:$Vw,62:$Vx}),o($VN,[2,65],{57:$Vs,60:$Vv,61:$Vw,62:$Vx}),o($VM,[2,66],{57:$Vs}),o($VM,[2,67],{57:$Vs}),o($VM,[2,68],{57:$Vs}),o($VO,[2,69],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VO,[2,70],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VO,[2,71],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VO,[2,72],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx}),o($VO,[2,73],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB}),o($VO,[2,74],{57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB}),o($VE,[2,75]),o($Vb,[2,18]),o($Vb,[2,12]),o($Vb,[2,14]),o($VK,[2,35]),o($VL,[2,37]),o($VL,[2,44]),o($VL,[2,45]),{17:$Vh,18:$Vi,45:144,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{21:145,35:$Vp,54:[1,146]},{17:$Vh,18:$Vi,45:147,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{51:[1,148]},o([2,9,10,17,27,28,29,30,37,44,46,48,49,50,51,54,55],$Vf),{17:$Vh,18:$Vi,45:149,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{20:[1,150],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},o($VL,[2,56]),{18:[1,151]},{20:[1,152],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},{18:[1,153]},{20:[1,154],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},o($VL,[2,60],{9:[1,155]}),{17:$Vh,18:$Vi,45:156,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{21:157,35:$Vp},{17:$Vh,18:$Vi,45:158,59:$Vj,69:$Vk,70:$Vl,71:$Vm,72:$Vn},{21:159,35:$Vp},o($VL,[2,61]),{20:[1,160],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},o($VL,[2,55]),{20:[1,161],56:$Vr,57:$Vs,58:$Vt,59:$Vu,60:$Vv,61:$Vw,62:$Vx,63:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD},o($VP,[2,59]),{21:162,35:$Vp},o($VL,[2,53],{9:[1,163]}),o($VP,[2,58]),o($VL,[2,54])],
defaultActions: {16:[2,22],17:[2,23],18:[2,24],19:[2,25],20:[2,26],21:[2,27],22:[2,28],24:[2,2],37:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const { default: Ast } = require("../ast/ast");  
  const { default: NodeInfo } = require("../scope/node_info");
  const { default: ImportStm } = require("../ast/statement/import");
  const { default: Print } = require("../ast/statement/print");
  const { default: Identifier } = require("../ast/expression/identifier");
  const { default: Arithmetic } = require("../ast/expression/arithmetic");
  const { default: Relational } = require("../ast/expression/relational");
  const { default: Comparator } = require("../ast/expression/comparator");
  const { default: And } = require("../ast/expression/and");
  const { default: UMenos } = require("../ast/expression/umenos");
  const { default: Literal } = require("../ast/expression/literal");
  const { default: FunctionStm } = require("../ast/statement/function");
  const { default: ParameterStm } = require("../ast/statement/parameter");
  const { default: BlockStm } = require("../ast/statement/block");
  const { default: IfStm } = require("../ast/statement/if_statement");
  const { default: SubIf } = require("../ast/statement/sub_if");
  const { default: WhileStm } = require("../ast/statement/while");
  const { default: DoWhileStm } = require("../ast/statement/do_while");
  const {
    VarDeclaration,
    VarDeclarationGlobal,
    VarDeclarationType,
  } = require("../ast/statement/variable_declaration");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Ignore blank spaces */ 
break;
case 1: this.pushState("TRADITIONAL_COMMENT"); 
break;
case 2: this.popState(); 
break;
case 3: this.popState(); 
break;
case 4: /* Ignore anything */ 
break;
case 5: this.pushState("END_OF_LINE_COMMENT"); 
break;
case 6: this.popState(); 
break;
case 7: /* Ignore */ 
break;
case 8: return "import"; 
break;
case 9: return "switch"; 
break;
case 10: return "continue"; 
break;
case 11: return "private"; 
break;
case 12: return "define"; 
break;
case 13: return "try"; 
break;
case 14: return "integer"; 
break;
case 15: return "var"; 
break;
case 16: return "case"; 
break;
case 17: return "return"; 
break;
case 18: return "void"; 
break;
case 19: return "as"; 
break;
case 20: return "catch"; 
break;
case 21: return "double"; 
break;
case 22: return "const"; 
break;
case 23: return "if"; 
break;
case 24: return "default"; 
break;
case 25: return "print"; 
break;
case 26: return "for"; 
break;
case 27: return "strc"; 
break;
case 28: return "throw"; 
break;
case 29: return "char"; 
break;
case 30: return "global"; 
break;
case 31: return "else"; 
break;
case 32: return "break"; 
break;
case 33: return "public"; 
break;
case 34: return "while"; 
break;
case 35: return "do"; 
break;
case 36: return "boolean"; 
break;
case 37: return "BOOLEAN_LITERAL";   
break;
case 38: return "DOUBLE_LITERAL";    
break;
case 39: return "INTEGER_LITERAL";   
break;
case 40: stringBuilder.length = 0; this.begin("CHAR");   
break;
case 41:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "CHAR_LITERAL";
                                  
break;
case 42: stringBuilder.push("'");   
break;
case 43: stringBuilder.push("\"");   
break;
case 44: stringBuilder.push("\\");   
break;
case 45: stringBuilder.push("\n");   
break;
case 46: stringBuilder.push("\r");   
break;
case 47: stringBuilder.push("\t");   
break;
case 48: stringBuilder.push(yy_.yytext); 
break;
case 49:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 50: stringBuilder.push(yy_.yytext); 
break;
case 51: stringBuilder.length = 0; this.begin("STRING"); 
break;
case 52:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "STRING_LITERAL";
                                  
break;
case 53: stringBuilder.push("\"");   
break;
case 54: stringBuilder.push("\\");   
break;
case 55: stringBuilder.push("\n");   
break;
case 56: stringBuilder.push("\r");   
break;
case 57: stringBuilder.push("\t");   
break;
case 58: stringBuilder.push(yy_.yytext); 
break;
case 59:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 60: stringBuilder.push(yy_.yytext); 
break;
case 61: return "FILE"; 
break;
case 62: return "IDENTIFIER"; 
break;
case 63: return "^^"; 
break;
case 64: return "++"; 
break;
case 65: return "--"; 
break;
case 66: return "!="; 
break;
case 67: return "=="; 
break;
case 68: return ">="; 
break;
case 69: return "<="; 
break;
case 70: return "&&"; 
break;
case 71: return "||"; 
break;
case 72: return ":="; 
break;
case 73: return "+"; 
break;
case 74: return "-"; 
break;
case 75: return "*"; 
break;
case 76: return "/"; 
break;
case 77: return "%"; 
break;
case 78: return "="; 
break;
case 79: return ">"; 
break;
case 80: return "<"; 
break;
case 81: return "?"; 
break;
case 82: return ":"; 
break;
case 83: return "^"; 
break;
case 84: return "!"; 
break;
case 85: return "("; 
break;
case 86: return ")"; 
break;
case 87: return "["; 
break;
case 88: return "]"; 
break;
case 89: return "{"; 
break;
case 90: return "}"; 
break;
case 91: return ","; 
break;
case 92: return "?"; 
break;
case 93: return ":"; 
break;
case 94: return ";"; 
break;
case 95: return "."; 
break;
case 96: return "EOF"; 
break;
case 97: return yy_.yytext; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:$)/i,/^(?:[^])/i,/^(?:\/\/)/i,/^(?:(\r|\n|\r\n))/i,/^(?:.)/i,/^(?:import\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:(true|false\b))/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:')/i,/^(?:')/i,/^(?:\\\\')/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\v)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\'\\]+)/i,/^(?:")/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\\]+)/i,/^(?:([a-zA-Z0-9_-]+(\.[A-Za-z0-9]+)+))/i,/^(?:([a-zA-Z_][_a-zA-Z0-9ñÑ]*))/i,/^(?:\^\^)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[41,42,43,44,45,46,47,48,49,50],"inclusive":false},"STRING":{"rules":[52,53,54,55,56,57,58,59,60],"inclusive":false},"TRADITIONAL_COMMENT":{"rules":[2,3,4],"inclusive":false},"END_OF_LINE_COMMENT":{"rules":[6,7],"inclusive":false},"INITIAL":{"rules":[0,1,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,51,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
let stringBuilder = [];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}