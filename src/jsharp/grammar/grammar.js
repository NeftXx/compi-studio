/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,10],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,11],$V7=[1,12],$V8=[1,13],$V9=[1,14],$Va=[6,17,22,26,27,28,29,50,58,60,61],$Vb=[2,18],$Vc=[17,20,24],$Vd=[17,22,26,27,28,29,50,58,60,61],$Ve=[9,10,17,22,26,27,28,29,50,58,60,61],$Vf=[2,69],$Vg=[6,9,17,22,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,76,77,81],$Vh=[1,48],$Vi=[1,68],$Vj=[1,56],$Vk=[1,69],$Vl=[1,70],$Vm=[1,55],$Vn=[1,57],$Vo=[1,58],$Vp=[1,62],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,79],$Vw=[1,81],$Vx=[10,20],$Vy=[1,100],$Vz=[1,101],$VA=[1,102],$VB=[1,99],$VC=[1,83],$VD=[1,84],$VE=[1,85],$VF=[1,86],$VG=[1,87],$VH=[1,88],$VI=[1,89],$VJ=[1,90],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,94],$VO=[1,95],$VP=[1,96],$VQ=[1,97],$VR=[1,98],$VS=[6,9,10,17,20,22,24,25,26,27,28,29,33,46,47,48,50,58,60,61,63,64,65,66,67,70,71,74,75,76,77,81,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101],$VT=[1,108],$VU=[1,142],$VV=[1,144],$VW=[1,145],$VX=[1,146],$VY=[1,140],$VZ=[1,139],$V_=[1,149],$V$=[1,138],$V01=[1,147],$V11=[1,136],$V21=[6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86,87,89,90,91,92,93,94,95,96,97,98,99,100,101],$V31=[1,173],$V41=[10,20,33],$V51=[10,25],$V61=[6,17,22,26,27,28,29,33,46,47,48,50,58,60,61,66,67,69,70,71,74,76,77,81],$V71=[17,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,76,77,81],$V81=[1,197],$V91=[1,196],$Va1=[1,198],$Vb1=[1,199],$Vc1=[1,200],$Vd1=[6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101],$Ve1=[6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86,87,90,91,95,96,97,98,99,100,101],$Vf1=[6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86,87,99,100,101],$Vg1=[6,17,22,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,76,77,81],$Vh1=[9,17,20,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,76,77,81],$Vi1=[24,56,63,64,65],$Vj1=[1,269],$Vk1=[1,270],$Vl1=[17,26,27,28,29,33,46,47,48,50,58,60,61,66,67,69,70,71,74,76,77,81],$Vm1=[33,74,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"compilation_unit":3,"import_statement":4,"global_statements_list":5,"EOF":6,"import":7,"file_list":8,";":9,",":10,"FILE":11,"global_statement":12,"function_statement":13,"struct_definition":14,"variable_declaration":15,"type":16,"IDENTIFIER":17,"(":18,"parameter_list":19,")":20,"block":21,"void":22,"primitive_type":23,"[":24,"]":25,"integer":26,"double":27,"char":28,"boolean":29,"parameter":30,"{":31,"block_statement":32,"}":33,"statement":34,"print_statement":35,"if_statement":36,"switch_statement":37,"while_statement":38,"do_while_statement":39,"var_assignment":40,"break_statement":41,"continue_statement":42,"return_statement":43,"for_statement":44,"call_function_statement":45,"break":46,"continue":47,"return":48,"expression":49,"define":50,"as":51,"attribute_list":52,"struct_declaration":53,"strc":54,"attribute":55,"=":56,"id_list":57,"var":58,":=":59,"const":60,"global":61,"access_list":62,"++":63,"--":64,".":65,"do":66,"while":67,"if_list":68,"else":69,"if":70,"switch":71,"switch_labels":72,"switch_label":73,"case":74,":":75,"default":76,"for":77,"for_init":78,"for_conditional":79,"for_final":80,"print":81,"call_function_expression":82,"expression_list":83,"array_values":84,"&&":85,"||":86,"^":87,"!":88,"^^":89,"+":90,"-":91,"*":92,"/":93,"%":94,">":95,">=":96,"<":97,"<=":98,"===":99,"==":100,"!=":101,"$":102,"CHAR_LITERAL":103,"STRING_LITERAL":104,"DOUBLE_LITERAL":105,"INTEGER_LITERAL":106,"BOOLEAN_LITERAL":107,"NULL_LITERAL":108,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"import",9:";",10:",",11:"FILE",17:"IDENTIFIER",18:"(",20:")",22:"void",24:"[",25:"]",26:"integer",27:"double",28:"char",29:"boolean",31:"{",33:"}",46:"break",47:"continue",48:"return",50:"define",51:"as",54:"strc",56:"=",58:"var",59:":=",60:"const",61:"global",63:"++",64:"--",65:".",66:"do",67:"while",69:"else",70:"if",71:"switch",74:"case",75:":",76:"default",77:"for",81:"print",85:"&&",86:"||",87:"^",88:"!",89:"^^",90:"+",91:"-",92:"*",93:"/",94:"%",95:">",96:">=",97:"<",98:"<=",99:"===",100:"==",101:"!=",102:"$",103:"CHAR_LITERAL",104:"STRING_LITERAL",105:"DOUBLE_LITERAL",106:"INTEGER_LITERAL",107:"BOOLEAN_LITERAL",108:"NULL_LITERAL"},
productions_: [0,[3,3],[3,2],[4,2],[4,3],[8,3],[8,1],[5,2],[5,1],[12,1],[12,1],[12,1],[12,2],[13,6],[13,5],[13,6],[13,5],[16,1],[16,1],[16,3],[16,3],[23,1],[23,1],[23,1],[23,1],[19,3],[19,1],[30,2],[21,3],[21,2],[32,2],[32,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,2],[34,2],[34,2],[41,1],[41,2],[42,1],[42,2],[43,2],[43,3],[14,6],[14,7],[53,5],[53,5],[53,4],[52,3],[52,1],[55,2],[55,4],[15,4],[15,4],[15,4],[15,4],[15,2],[57,3],[57,1],[40,3],[40,3],[40,6],[40,2],[40,2],[40,5],[40,5],[40,2],[40,2],[62,3],[62,4],[62,6],[62,3],[39,6],[39,7],[38,5],[36,3],[36,1],[68,7],[68,5],[37,7],[37,6],[72,2],[72,1],[73,4],[73,3],[73,3],[73,2],[44,9],[78,1],[78,1],[78,0],[79,1],[79,0],[80,1],[80,0],[35,4],[35,5],[45,1],[82,4],[82,3],[83,3],[83,1],[84,3],[49,3],[49,3],[49,3],[49,2],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,4],[49,3],[49,3],[49,5],[49,6],[49,4],[49,2],[49,2],[49,2],[49,2],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return new Ast($$[$0-1], yy.filename, $$[$0-2]);
  
break;
case 2:

    return new Ast($$[$0-1], yy.filename);
  
break;
case 3:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 4:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 5: case 25: case 59: case 68: case 111:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 6: case 26: case 60: case 69: case 93: case 112:
 this.$ = [$$[$0]]; 
break;
case 7: case 30:

    this.$ = $$[$0-1];
    if ($$[$0]) this.$.push($$[$0]);
  
break;
case 8: case 31:

    this.$ = [];
    if ($$[$0]) this.$.push($$[$0]);
  
break;
case 9: case 10: case 11: case 17: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 99: case 100: case 102: case 104: case 141: case 142: case 143:
 this.$ = $$[$0]; 
break;
case 12: case 45: case 46: case 47: case 132:
 this.$ = $$[$0-1]; 
break;
case 13:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 14:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-3], [], $$[$0]
    );
  
break;
case 15:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 16:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-3], [], $$[$0]
    );
  
break;
case 18:

    if ($$[$0] === "string") {
      this.$ = yy.typeFactory.getString();
    } else {
      this.$ = yy.typeFactory.createNewStructure(yy.filename, $$[$0]);
    }
  
break;
case 19:
 this.$ = yy.typeFactory.createArrayType($$[$0-2], 1); 
break;
case 20:

    if ($$[$0-2] === "string") {
      this.$ = yy.typeFactory.createArrayType(
        yy.typeFactory.getString(), 1
      );
    } else {
      this.$ = yy.typeFactory.createArrayType(
        yy.typeFactory.createNewStructure(yy.filename, $$[$0-2]), 1
      );
    }
  
break;
case 21:
 this.$ = yy.typeFactory.getInteger(); 
break;
case 22:
 this.$ = yy.typeFactory.getDouble();  
break;
case 23:
 this.$ = yy.typeFactory.getChar();    
break;
case 24:
 this.$ = yy.typeFactory.getBoolean(); 
break;
case 27:

    this.$ = new ParameterStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 28:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 29:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), []
    );
  
break;
case 48: case 49:

    this.$ = new BreakStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      )
    );
  
break;
case 50: case 51:

    this.$ = new ContinueStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      )
    );
  
break;
case 52:

    this.$ = new ReturnStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      )
    )
  
break;
case 53:

    this.$ = new ReturnStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    )
  
break;
case 54:

    this.$ = new Structure(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-1]
    );
  
break;
case 55:

    this.$ = new Structure(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-2]
    );
  
break;
case 56:

    let typeArray1 = yy.typeFactory.createArrayType($$[$0-3], 1);
    this.$ = new StructDeclarationArray(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), typeArray1, $$[$0-1]
    );
  
break;
case 57:

    if ($$[$0-3] === "string") {
    this.$ = new StructDeclarationArray(
        new NodeInfo(
          yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
        ), yy.typeFactory.createArrayType(yy.typeFactory.getString(), 1), $$[$0-1]
      );
    } else {
      this.$ = new StructDeclarationArray(
        new NodeInfo(
          yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
        ), yy.typeFactory.createNewStructure(yy.filename, $$[$0-3]), $$[$0-1]
      );
    }    
  
break;
case 58:

    this.$ = new StructDeclaration(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
  
break;
case 61:

    this.$ = new Attribute(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 62:

    this.$ = new Attribute(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-2], $$[$0]
    );
  
break;
case 63:

    this.$ = new VarDeclarationType(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-2], $$[$0]
    );
  
break;
case 64:

    this.$ = new VarDeclaration(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), false, $$[$0-2], $$[$0]
    );
  
break;
case 65:

    this.$ = new VarDeclaration(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), true, $$[$0-2], $$[$0]
    );
  
break;
case 66:

    this.$ = new VarDeclarationGlobal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 67:

    this.$ = new VarDeclarationType(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 70:

    this.$ = new VarAssignment(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 71:

    let tempId = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
    this.$ = new VarAssignment(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempId, $$[$0]
    );
  
break;
case 72:

    let idTemp = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5]
    );
    let tempArray = new ArrayAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), idTemp, $$[$0-3]
    );
    this.$ = new VarAssignment(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempArray, $$[$0]
    );
  
break;
case 73:

    let tempId2 = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
    this.$ = new DecreaseIncrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempId2, $$[$0]
    );
  
break;
case 74:

    let tempId3 = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
    this.$ = new DecreaseIncrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempId3, $$[$0]
    );
  
break;
case 75:

    let idTemp4 = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4]
    );
    let tempArray2 = new ArrayAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), idTemp4, $$[$0-2]
    );
    this.$ = new DecreaseIncrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempArray2, $$[$0]
    );
  
break;
case 76:

    let idTemp5 = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4]
    );
    let tempArray3 = new ArrayAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), idTemp5, $$[$0-2]
    );
    this.$ = new DecreaseIncrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), tempArray3, $$[$0]
    );
  
break;
case 77: case 78:

    this.$ = new DecreaseIncrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 79:

    this.$ = new AttributeAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 80:

    this.$ = new ArrayAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-1]
    );
  
break;
case 81:

    let idTemp1= new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5]
    );

    let attAccess = new AttributeAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), idTemp1, $$[$0-3]
    );

    this.$ = new ArrayAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), attAccess, $$[$0-1]
    );
  
break;
case 82:

    let idTemp2 = new IdentifierAccess (
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
    this.$ = new AttributeAccess(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), idTemp2, $$[$0]
    );
  
break;
case 83:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-1]
    );
  
break;
case 84:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-2]
    );
  
break;
case 85:

    this.$ = new WhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 86:

    $$[$0-2].push(new SubIf(
      new NodeInfo(
        yy.filename, _$[$0-2].first_line, _$[$0-2].first_column
      ), $$[$0]));
    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0-2]
      );
  
break;
case 87:

    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0]
      );
  
break;
case 88:

    this.$ = $$[$0-6];
    this.$.push(new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2]));
  
break;
case 89:

    this.$ = [new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2])];
  
break;
case 90:

    this.$ = new SwitchStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-1]
    );
  
break;
case 91:

    this.$ = new SwitchStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], []
    );
  
break;
case 92:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 94:

    this.$ = new CaseStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2]
    );
  
break;
case 95:

    this.$ = new CaseStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), [], $$[$0-1]
    );
  
break;
case 96:

    this.$ = new CaseStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 97:

    this.$ = new CaseStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), []
    );
  
break;
case 98:

    this.$ = new ForStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-6], $$[$0-4], $$[$0-2]
    );
  
break;
case 101: case 103: case 105:
 this.$ = undefined; 
break;
case 106:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 107:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
  
break;
case 108:

    this.$ = new CallFunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 109:

    this.$ = new CallFunction(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-1]
    );
  
break;
case 110:

    this.$ = new CallFunction(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], []
    );
  
break;
case 113:

    this.$ = new ArrayValues(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 114:

    this.$ = new And(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 115:

    this.$ = new Or(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 116:

    this.$ = new Xor(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 117:

    this.$ = new Not(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 118:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "^^", $$[$0]
    );
  
break;
case 119:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "+", $$[$0]
    );
  
break;
case 120:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "-", $$[$0]
    );
  
break;
case 121:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "*", $$[$0]
    );
  
break;
case 122:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "/", $$[$0]
    );
  
break;
case 123:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "%", $$[$0]
    );
  
break;
case 124:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">", $$[$0]
    )
  
break;
case 125:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">=", $$[$0]
    )
  
break;
case 126:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<", $$[$0]
    )
  
break;
case 127:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<=", $$[$0]
    )
  
break;
case 128:

    this.$ = new Comparator(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "===", $$[$0]
    )
  
break;
case 129:

    this.$ = new Comparator(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "==", $$[$0]
    )
  
break;
case 130:

    this.$ = new Comparator(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "!=", $$[$0]
    )
  
break;
case 131:

    this.$ = new Cast(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 133:

    this.$ = new AccessAttribute(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 134:

    this.$ = new OwnFunctions(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-2]
    );
  
break;
case 135:

    this.$ = new OwnFunctions(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-3], $$[$0-1]
    );
  
break;
case 136:

    this.$ = new AccessArray(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-3], $$[$0-1]
    );
  
break;
case 137: case 138:

    this.$ = new IncreaseDecrease(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 139:

    this.$ = new UMenos(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    )
  
break;
case 140:

    this.$ = new ReferenceValue(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 144:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getChar(), $$[$0]
    );
  
break;
case 145:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getString(), $$[$0]
    );
  
break;
case 146:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getDouble(), Number($$[$0])
    );
  
break;
case 147:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getInteger(), Number($$[$0])
    );
  
break;
case 148:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getBoolean(), $$[$0].toLowerCase() === "true"
    );
  
break;
case 149:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getNull(), -1
    );
  
break;
case 150:

    this.$ = new Identifier(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
}
},
table: [{3:1,4:2,5:3,7:[1,4],12:5,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:15,26:$V2,27:$V3,28:$V4,29:$V5,50:$V6,58:$V7,60:$V8,61:$V9},{1:[3]},{5:21,12:5,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:15,26:$V2,27:$V3,28:$V4,29:$V5,50:$V6,58:$V7,60:$V8,61:$V9},{6:[1,22],12:23,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:15,26:$V2,27:$V3,28:$V4,29:$V5,50:$V6,58:$V7,60:$V8,61:$V9},{8:24,11:[1,25]},o($Va,[2,8]),o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11],{9:[1,26]}),{17:[1,27],57:28},{17:[1,29]},{17:[1,30]},{17:[1,31]},{17:[1,32]},{17:[1,33]},{17:[2,17],24:[1,34]},{17:$Vb,24:[1,35]},o($Vc,[2,21]),o($Vc,[2,22]),o($Vc,[2,23]),o($Vc,[2,24]),{6:[1,36],12:23,13:6,14:7,15:8,16:9,17:$V0,22:$V1,23:15,26:$V2,27:$V3,28:$V4,29:$V5,50:$V6,58:$V7,60:$V8,61:$V9},{1:[2,2]},o($Va,[2,7]),o($Vd,[2,3],{9:[1,37],10:[1,38]}),o($Ve,[2,6]),o($Va,[2,12]),o([6,9,10,17,22,26,27,28,29,50,56,58,60,61],$Vf,{18:[1,39]}),o($Vg,[2,67],{10:[1,41],56:[1,40]}),{18:[1,42]},{51:[1,43]},{59:[1,44]},{59:[1,45]},{59:[1,46]},{25:[1,47]},{25:$Vh},{1:[2,1]},o($Vd,[2,4]),{11:[1,49]},{16:53,17:$V0,19:50,20:[1,51],23:15,26:$V2,27:$V3,28:$V4,29:$V5,30:52},{17:$Vi,18:$Vj,31:$Vk,49:54,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:[1,71]},{16:53,17:$V0,19:72,20:[1,73],23:15,26:$V2,27:$V3,28:$V4,29:$V5,30:52},{24:[1,74]},{17:$Vi,18:$Vj,31:$Vk,49:75,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:76,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:77,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:[2,19]},{17:[2,20]},o($Ve,[2,5]),{10:$Vv,20:[1,78]},{21:80,31:$Vw},o($Vx,[2,26]),{17:[1,82]},o($Vg,[2,63],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),{17:$Vi,18:$Vj,31:$Vk,49:103,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,23:104,26:$V2,27:$V3,28:$V4,29:$V5,31:$Vk,49:105,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:106,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:107,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($VS,[2,141]),o($VS,[2,142]),o($VS,[2,143]),o($VS,[2,144]),o($VS,[2,145]),o($VS,[2,146]),o($VS,[2,147]),o($VS,[2,148]),o($VS,[2,149]),o($VS,[2,150],{18:$VT}),{17:$Vi,18:$Vj,31:$Vk,49:110,53:61,54:$Vl,82:60,83:109,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:[1,112],23:111,26:$V2,27:$V3,28:$V4,29:$V5},o([6,9,10,17,22,26,27,28,29,33,46,47,48,50,56,58,60,61,66,67,70,71,74,76,77,81],[2,68]),{10:$Vv,20:[1,113]},{21:114,31:$Vw},{16:117,17:$V0,23:15,26:$V2,27:$V3,28:$V4,29:$V5,52:115,55:116},o($Vg,[2,64],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($Vg,[2,65],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($Vg,[2,66],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),{21:118,31:$Vw},{16:53,17:$V0,23:15,26:$V2,27:$V3,28:$V4,29:$V5,30:119},o($Va,[2,14]),{14:128,15:130,16:143,17:$VU,23:15,26:$V2,27:$V3,28:$V4,29:$V5,32:120,33:[1,121],34:122,35:123,36:124,37:125,38:126,39:127,40:129,41:131,42:132,43:133,44:134,45:135,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,62:141,66:$VY,67:$VZ,68:137,70:$V_,71:$V$,77:$V01,81:$V11,82:148},o($Vx,[2,27]),{17:$Vi,18:$Vj,31:$Vk,49:150,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:151,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:152,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:153,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:154,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:155,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:156,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:157,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:158,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:159,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:160,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:161,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:162,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:163,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:164,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:165,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:[1,166]},{17:$Vi,18:$Vj,31:$Vk,49:167,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($VS,[2,137]),o($VS,[2,138]),o($V21,[2,117],{24:$Vy,63:$Vz,64:$VA,65:$VB}),{20:[1,168]},{20:[1,169],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($V21,[2,139],{24:$Vy,63:$Vz,64:$VA,65:$VB}),o($V21,[2,140],{24:$Vy,63:$Vz,64:$VA,65:$VB}),{17:$Vi,18:$Vj,20:[1,171],31:$Vk,49:110,53:61,54:$Vl,82:60,83:170,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{10:$V31,33:[1,172]},o($V41,[2,112],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),{24:[1,174]},{18:[1,176],24:[1,175]},{21:177,31:$Vw},o($Va,[2,16]),{10:[1,179],25:[1,178]},o($V51,[2,60]),{17:[1,180]},o($Va,[2,13]),o($Vx,[2,25]),{14:128,15:130,16:143,17:$VU,23:15,26:$V2,27:$V3,28:$V4,29:$V5,33:[1,181],34:182,35:123,36:124,37:125,38:126,39:127,40:129,41:131,42:132,43:133,44:134,45:135,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,62:141,66:$VY,67:$VZ,68:137,70:$V_,71:$V$,77:$V01,81:$V11,82:148},o($V61,[2,29]),o($V71,[2,31]),o($V71,[2,32]),o($V71,[2,33]),o($V71,[2,34]),o($V71,[2,35]),o($V71,[2,36]),o($V71,[2,37]),o($V71,[2,38],{9:[1,183]}),o($V71,[2,39],{9:[1,184]}),o($V71,[2,40]),o($V71,[2,41]),o($V71,[2,42]),o($V71,[2,43]),o($V71,[2,44],{9:[1,185]}),{18:[1,186]},o($V71,[2,87],{69:[1,187]}),{18:[1,188]},{18:[1,189]},{21:190,31:$Vw},{24:[1,195],56:[1,191],63:[1,192],64:[1,193],65:[1,194]},{17:$Vb,18:$VT,24:$V81,56:$V91,63:$Va1,64:$Vb1,65:$Vc1},{17:[1,201],57:28},o($V71,[2,48],{9:[1,202]}),o($V71,[2,50],{9:[1,203]}),{9:[1,204],17:$Vi,18:$Vj,31:$Vk,49:205,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{18:[1,206]},o([9,17,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,76,77,81],[2,108]),{18:[1,207]},o([6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86],[2,114],{24:$Vy,63:$Vz,64:$VA,65:$VB,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o([6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,86],[2,115],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o([6,9,10,17,20,22,25,26,27,28,29,33,46,47,48,50,58,60,61,66,67,70,71,74,75,76,77,81,85,86,87],[2,116],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($Vd1,[2,118],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF}),o($Ve1,[2,119],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,92:$VI,93:$VJ,94:$VK}),o($Ve1,[2,120],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,92:$VI,93:$VJ,94:$VK}),o($Vd1,[2,121],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF}),o($Vd1,[2,122],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF}),o($Vd1,[2,123],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF}),o($Vf1,[2,124],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK}),o($Vf1,[2,125],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK}),o($Vf1,[2,126],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK}),o($Vf1,[2,127],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK}),o($Vf1,[2,128],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($Vf1,[2,129],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($Vf1,[2,130],{24:$Vy,63:$Vz,64:$VA,65:$VB,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO}),o($VS,[2,133],{18:[1,208]}),{24:$Vy,25:[1,209],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{17:$Vi,18:$Vj,31:$Vk,49:210,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($VS,[2,132]),{10:$V31,20:[1,211]},o($VS,[2,110]),o($VS,[2,113]),{17:$Vi,18:$Vj,31:$Vk,49:212,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:213,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:214,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{20:[1,215]},o($Va,[2,15]),o($Vg1,[2,54],{9:[1,216]}),{16:117,17:$V0,23:15,26:$V2,27:$V3,28:$V4,29:$V5,55:217},o($V51,[2,61],{56:[1,218]}),o($V61,[2,28]),o($V71,[2,30]),o($V71,[2,46]),o($V71,[2,47]),o($V71,[2,45]),{17:$Vi,18:$Vj,31:$Vk,49:219,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{21:220,31:$Vw,70:[1,221]},{17:$Vi,18:$Vj,31:$Vk,49:222,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:223,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{67:[1,224]},{17:$Vi,18:$Vj,31:$Vk,49:225,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vh1,[2,77]),o($Vh1,[2,78]),{17:[1,226]},{17:$Vi,18:$Vj,31:$Vk,49:227,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,31:$Vk,49:228,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,25:$Vh,31:$Vk,49:229,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vh1,[2,73]),o($Vh1,[2,74]),{17:[1,230]},o([9,10,17,26,27,28,29,33,46,47,48,50,56,58,60,61,66,67,70,71,74,76,77,81],$Vf),o($V71,[2,49]),o($V71,[2,51]),o($V71,[2,52]),{9:[1,231],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{9:[2,101],15:233,16:143,17:[1,235],23:15,26:$V2,27:$V3,28:$V4,29:$V5,40:234,58:$V7,60:$V8,61:$V9,62:141,78:232},{17:$Vi,18:$Vj,31:$Vk,49:236,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{17:$Vi,18:$Vj,20:[1,237],31:$Vk,49:238,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($VS,[2,136]),o($V21,[2,131],{24:$Vy,63:$Vz,64:$VA,65:$VB}),o($VS,[2,109]),o($V41,[2,111],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),{24:$Vy,25:[1,239],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{24:$Vy,25:[1,240],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($VS,[2,58]),o($Vg1,[2,55]),o($V51,[2,59]),{17:$Vi,18:$Vj,31:$Vk,49:241,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{20:[1,242],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($V71,[2,86]),{18:[1,243]},{20:[1,244],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{20:[1,245],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{18:[1,246]},o($Vh1,[2,70],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($Vi1,[2,79]),{24:$Vy,25:[1,247],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($Vh1,[2,71],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),{24:$Vy,25:[1,248],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($Vi1,[2,82]),o($V71,[2,53]),{9:[1,250]},{9:[2,99]},{9:[2,100]},{17:$Vb,24:$V81,56:$V91,63:$Va1,64:$Vb1,65:$Vc1},{20:[1,251],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($VS,[2,134]),{20:[1,252],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($VS,[2,56]),o($VS,[2,57]),o($V51,[2,62],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($V71,[2,106],{9:[1,253]}),{17:$Vi,18:$Vj,31:$Vk,49:254,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{31:[1,255]},{21:256,31:$Vw},{17:$Vi,18:$Vj,31:$Vk,49:257,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vi1,[2,80]),{56:[1,258],63:[1,259],64:[1,260]},{17:$Vi,18:$Vj,31:$Vk,49:261,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{9:[2,103],17:$Vi,18:$Vj,31:$Vk,49:263,53:61,54:$Vl,79:262,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{21:264,31:$Vw},o($VS,[2,135]),o($V71,[2,107]),{20:[1,265],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{33:[1,267],72:266,73:268,74:$Vj1,76:$Vk1},o($V71,[2,85]),{20:[1,271],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{17:$Vi,18:$Vj,31:$Vk,49:272,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vh1,[2,75]),o($Vh1,[2,76]),{24:$Vy,25:[1,273],63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},{9:[1,274]},{9:[2,102],24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($Vl1,[2,89]),{21:275,31:$Vw},{33:[1,276],73:277,74:$Vj1,76:$Vk1},o($V71,[2,91]),o($Vm1,[2,93]),{17:$Vi,18:$Vj,31:$Vk,49:278,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},{75:[1,279]},o($V71,[2,83],{9:[1,280]}),o($Vh1,[2,72],{24:$Vy,63:$Vz,64:$VA,65:$VB,85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR}),o($Vi1,[2,81]),{17:[1,283],20:[2,105],40:282,62:141,80:281},o($Vl1,[2,88]),o($V71,[2,90]),o($Vm1,[2,92]),{24:$Vy,63:$Vz,64:$VA,65:$VB,75:[1,284],85:$VC,86:$VD,87:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR},o($Vm1,[2,97],{23:15,34:122,35:123,36:124,37:125,38:126,39:127,14:128,40:129,15:130,41:131,42:132,43:133,44:134,45:135,68:137,62:141,16:143,82:148,32:285,17:$VU,26:$V2,27:$V3,28:$V4,29:$V5,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,66:$VY,67:$VZ,70:$V_,71:$V$,77:$V01,81:$V11}),o($V71,[2,84]),{20:[1,286]},{20:[2,104]},{24:[1,287],56:$V91,63:$Va1,64:$Vb1,65:$Vc1},o($Vm1,[2,95],{23:15,34:122,35:123,36:124,37:125,38:126,39:127,14:128,40:129,15:130,41:131,42:132,43:133,44:134,45:135,68:137,62:141,16:143,82:148,32:288,17:$VU,26:$V2,27:$V3,28:$V4,29:$V5,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,66:$VY,67:$VZ,70:$V_,71:$V$,77:$V01,81:$V11}),o($Vm1,[2,96],{23:15,35:123,36:124,37:125,38:126,39:127,14:128,40:129,15:130,41:131,42:132,43:133,44:134,45:135,68:137,62:141,16:143,82:148,34:182,17:$VU,26:$V2,27:$V3,28:$V4,29:$V5,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,66:$VY,67:$VZ,70:$V_,71:$V$,77:$V01,81:$V11}),{21:289,31:$Vw},{17:$Vi,18:$Vj,31:$Vk,49:229,53:61,54:$Vl,82:60,84:59,88:$Vm,91:$Vn,102:$Vo,103:$Vp,104:$Vq,105:$Vr,106:$Vs,107:$Vt,108:$Vu},o($Vm1,[2,94],{23:15,35:123,36:124,37:125,38:126,39:127,14:128,40:129,15:130,41:131,42:132,43:133,44:134,45:135,68:137,62:141,16:143,82:148,34:182,17:$VU,26:$V2,27:$V3,28:$V4,29:$V5,46:$VV,47:$VW,48:$VX,50:$V6,58:$V7,60:$V8,61:$V9,66:$VY,67:$VZ,70:$V_,71:$V$,77:$V01,81:$V11}),o($V71,[2,98])],
defaultActions: {22:[2,2],36:[2,1],47:[2,19],48:[2,20],233:[2,99],234:[2,100],282:[2,104]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { default: Ast } = require("../ast/ast");  
  const { default: NodeInfo } = require("../scope/node_info");
  const { default: ImportStm } = require("../ast/statement/import");
  const { default: Print } = require("../ast/statement/print");
  const { default: Identifier } = require("../ast/expression/identifier");
  const { default: Arithmetic } = require("../ast/expression/arithmetic");
  const { default: Relational } = require("../ast/expression/relational");
  const { default: Comparator } = require("../ast/expression/comparator");
  const { default: Cast } = require("../ast/expression/cast");
  const { default: And } = require("../ast/expression/and");
  const { default: Or } = require("../ast/expression/or");
  const { default: Xor } = require("../ast/expression/xor");
  const { default: Not } = require("../ast/expression/not");
  const { default: UMenos } = require("../ast/expression/umenos");
  const { default: Literal } = require("../ast/expression/literal");
  const { default: FunctionStm } = require("../ast/statement/function");
  const { default: ParameterStm } = require("../ast/statement/parameter");
  const { default: BlockStm } = require("../ast/statement/block");
  const { default: IfStm } = require("../ast/statement/if_statement");
  const { default: SubIf } = require("../ast/statement/sub_if");
  const { default: WhileStm } = require("../ast/statement/while");
  const { default: ForStm } = require("../ast/statement/for_stm");
  const { default: DoWhileStm } = require("../ast/statement/do_while");
  const { default: AccessAttribute } = require("../ast/expression/access_attribute");
  const { default: AccessArray } = require("../ast/expression/access_array");
  const { default: OwnFunctions } = require("../ast/expression/ow_function");
  const { StructDeclaration, StructDeclarationArray } = require("../ast/expression/struct_declaration");
  const { Structure, Attribute } = require("../ast/statement/structure");
  const { default: ArrayAccess } = require("../ast/statement/var_assignment/array_access");
  const { default: AttributeAccess } = require("../ast/statement/var_assignment/attribute_access");
  const { default: IdentifierAccess } = require("../ast/statement/var_assignment/identifier_access");
  const { default: VarAssignment } = require("../ast/statement/var_assignment/var_assignment");
  const { default: BreakStm } = require("../ast/statement/break_stm");
  const { default: ContinueStm } = require("../ast/statement/continue_stm");
  const { default: ReturnStm } = require("../ast/statement/return_stm");
  const { default: SwitchStm } = require("../ast/statement/switch_stm");
  const { default: CaseStm } = require("../ast/statement/case_stm");
  const { default: CallFunction } = require("../ast/expression/call_function");
  const { default: CallFunctionStm } = require("../ast/statement/call_function_stm");
  const { default: ArrayValues } = require("../ast/expression/array_values");
  const { default: ReferenceValue } = require("../ast/expression/reference_value");
  const { default: IncreaseDecrease } = require("../ast/expression/increase_decrease");
  const { default: DecreaseIncrease } = require("../ast/statement/var_assignment/decrease_increase")
  const {
    VarDeclaration,
    VarDeclarationGlobal,
    VarDeclarationType,
  } = require("../ast/statement/variable_declaration");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Ignore blank spaces */ 
break;
case 1: this.pushState("TRADITIONAL_COMMENT"); 
break;
case 2: this.popState(); 
break;
case 3: this.popState(); 
break;
case 4: /* Ignore anything */ 
break;
case 5: this.pushState("END_OF_LINE_COMMENT"); 
break;
case 6: this.popState(); 
break;
case 7: /* Ignore */ 
break;
case 8: return "import"; 
break;
case 9: return "switch"; 
break;
case 10: return "continue"; 
break;
case 11: return "private"; 
break;
case 12: return "define"; 
break;
case 13: return "try"; 
break;
case 14: return "integer"; 
break;
case 15: return "var"; 
break;
case 16: return "case"; 
break;
case 17: return "return"; 
break;
case 18: return "void"; 
break;
case 19: return "as"; 
break;
case 20: return "catch"; 
break;
case 21: return "double"; 
break;
case 22: return "const"; 
break;
case 23: return "if"; 
break;
case 24: return "default"; 
break;
case 25: return "print"; 
break;
case 26: return "for"; 
break;
case 27: return "strc"; 
break;
case 28: return "throw"; 
break;
case 29: return "char"; 
break;
case 30: return "global"; 
break;
case 31: return "else"; 
break;
case 32: return "break"; 
break;
case 33: return "public"; 
break;
case 34: return "while"; 
break;
case 35: return "do"; 
break;
case 36: return "boolean"; 
break;
case 37: return "NULL_LITERAL";      
break;
case 38: return "BOOLEAN_LITERAL";   
break;
case 39: return "DOUBLE_LITERAL";    
break;
case 40: return "INTEGER_LITERAL";   
break;
case 41: stringBuilder.length = 0; this.begin("CHAR");   
break;
case 42:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "CHAR_LITERAL";
                                  
break;
case 43: stringBuilder.push("'");   
break;
case 44: stringBuilder.push("\"");   
break;
case 45: stringBuilder.push("\\");   
break;
case 46: stringBuilder.push("\n");   
break;
case 47: stringBuilder.push("\r");   
break;
case 48: stringBuilder.push("\t");   
break;
case 49: stringBuilder.push(yy_.yytext); 
break;
case 50:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 51: stringBuilder.push(yy_.yytext); 
break;
case 52: stringBuilder.length = 0; this.begin("STRING"); 
break;
case 53:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "STRING_LITERAL";
                                  
break;
case 54: stringBuilder.push("\"");   
break;
case 55: stringBuilder.push("\\");   
break;
case 56: stringBuilder.push("\n");   
break;
case 57: stringBuilder.push("\r");   
break;
case 58: stringBuilder.push("\t");   
break;
case 59: stringBuilder.push(yy_.yytext); 
break;
case 60:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 61: stringBuilder.push(yy_.yytext); 
break;
case 62: return "FILE"; 
break;
case 63: yy_.yytext = yy_.yytext.toLowerCase(); return "IDENTIFIER"; 
break;
case 64: return "==="; 
break;
case 65: return "^^"; 
break;
case 66: return "++"; 
break;
case 67: return "--"; 
break;
case 68: return "!="; 
break;
case 69: return "=="; 
break;
case 70: return ">="; 
break;
case 71: return "<="; 
break;
case 72: return "&&"; 
break;
case 73: return "||"; 
break;
case 74: return ":="; 
break;
case 75: return "+"; 
break;
case 76: return "-"; 
break;
case 77: return "*"; 
break;
case 78: return "/"; 
break;
case 79: return "%"; 
break;
case 80: return "="; 
break;
case 81: return ">"; 
break;
case 82: return "<"; 
break;
case 83: return "$"; 
break;
case 84: return "^"; 
break;
case 85: return "!"; 
break;
case 86: return "("; 
break;
case 87: return ")"; 
break;
case 88: return "["; 
break;
case 89: return "]"; 
break;
case 90: return "{"; 
break;
case 91: return "}"; 
break;
case 92: return ","; 
break;
case 93: return "?"; 
break;
case 94: return ":"; 
break;
case 95: return ";"; 
break;
case 96: return "."; 
break;
case 97: return "EOF"; 
break;
case 98: return yy_.yytext; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:$)/i,/^(?:[^])/i,/^(?:\/\/)/i,/^(?:(\r|\n|\r\n))/i,/^(?:.)/i,/^(?:import\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:(null\b))/i,/^(?:(true|false\b))/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:')/i,/^(?:')/i,/^(?:\\\\')/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\v)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\'\\]+)/i,/^(?:")/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\\]+)/i,/^(?:([a-zA-Z0-9_-]+(\.[A-Za-z0-9]+)*(\.[j])))/i,/^(?:([a-zA-Z_][_a-zA-Z0-9ñÑ]*))/i,/^(?:===)/i,/^(?:\^\^)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\$)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[42,43,44,45,46,47,48,49,50,51],"inclusive":false},"STRING":{"rules":[53,54,55,56,57,58,59,60,61],"inclusive":false},"TRADITIONAL_COMMENT":{"rules":[2,3,4],"inclusive":false},"END_OF_LINE_COMMENT":{"rules":[6,7],"inclusive":false},"INITIAL":{"rules":[0,1,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,52,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],"inclusive":true}}
});
let stringBuilder = [];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}