/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,9],$V2=[1,10],$V3=[1,11],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[6,16,21,22,23,26,27,28,29],$V9=[16,21,26,27,28,29],$Va=[16,21,22,23,26,27,28,29],$Vb=[9,10,16,21,22,23,26,27,28,29],$Vc=[1,49],$Vd=[1,51],$Ve=[10,19],$Vf=[1,71],$Vg=[1,70],$Vh=[1,72],$Vi=[1,68],$Vj=[6,16,21,22,23,26,27,28,29,36,42,43,46,47,48],$Vk=[36,42,43,47,48],$Vl=[1,90],$Vm=[1,84],$Vn=[1,85],$Vo=[1,86],$Vp=[1,87],$Vq=[1,88],$Vr=[1,89],$Vs=[1,97],$Vt=[1,98],$Vu=[1,99],$Vv=[1,100],$Vw=[1,101],$Vx=[1,102],$Vy=[1,103],$Vz=[1,104],$VA=[1,105],$VB=[1,106],$VC=[1,107],$VD=[19,49,50,51,52,53,54,55,56,57,58,59],$VE=[19,49],$VF=[19,49,51,52,53,54,55,56,57,58,59],$VG=[19,49,51,52,56,57,58,59],$VH=[36,42,43,46,47,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"compilation_unit":3,"import_statement":4,"global_statements_list":5,"EOF":6,"import":7,"file_list":8,";":9,",":10,"FILE":11,"global_statement":12,"function_statement":13,"visibility":14,"type":15,"IDENTIFIER":16,"(":17,"parameter_list":18,")":19,"block":20,"void":21,"public":22,"private":23,"primitive_type":24,"reference_type":25,"integer":26,"double":27,"char":28,"boolean":29,"array_type":30,"[":31,"]":32,"parameter":33,"{":34,"block_statement":35,"}":36,"statement":37,"print_statement":38,"if_statement":39,"while_statement":40,"do_while_statement":41,"do":42,"while":43,"expression":44,"if_list":45,"else":46,"if":47,"print":48,"&&":49,"^^":50,"+":51,"-":52,"*":53,"/":54,"%":55,">":56,">=":57,"<":58,"<=":59,"STRING_LITERAL":60,"DOUBLE_LITERAL":61,"INTEGER_LITERAL":62,"BOOLEAN_LITERAL":63,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"import",9:";",10:",",11:"FILE",16:"IDENTIFIER",17:"(",19:")",21:"void",22:"public",23:"private",26:"integer",27:"double",28:"char",29:"boolean",31:"[",32:"]",34:"{",36:"}",42:"do",43:"while",46:"else",47:"if",48:"print",49:"&&",50:"^^",51:"+",52:"-",53:"*",54:"/",55:"%",56:">",57:">=",58:"<",59:"<=",60:"STRING_LITERAL",61:"DOUBLE_LITERAL",62:"INTEGER_LITERAL",63:"BOOLEAN_LITERAL"},
productions_: [0,[3,3],[3,2],[4,2],[4,3],[8,3],[8,1],[5,2],[5,1],[12,1],[13,7],[13,6],[13,7],[13,6],[13,6],[13,5],[13,6],[13,5],[14,1],[14,1],[15,1],[15,1],[24,1],[24,1],[24,1],[24,1],[25,1],[30,3],[30,3],[30,3],[18,3],[18,1],[33,2],[20,3],[20,2],[35,2],[35,1],[37,1],[37,1],[37,1],[37,1],[41,6],[41,7],[40,5],[39,3],[39,1],[45,7],[45,5],[38,4],[38,5],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,1],[44,1],[44,1],[44,1],[44,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return new Ast($$[$0-1], yy.filename, $$[$0-2]);
  
break;
case 2:

    return new Ast($$[$0-1], yy.filename);
  
break;
case 3:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    );
  
break;
case 4:

    this.$ = new ImportStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 5: case 30:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 6: case 8: case 31: case 36:
 this.$ = [$$[$0]]; 
break;
case 7: case 35:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 10: case 14:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 11: case 15:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-3], [], $$[$0]
    );
  
break;
case 12: case 16:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-4], $$[$0-2], $$[$0]
    );
  
break;
case 13: case 17:

    this.$ = new FunctionStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getVoid(), $$[$0-3], [], $$[$0]
    );
  
break;
case 20: case 21: case 37: case 38: case 39: case 40:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = yy.typeFactory.getInteger(); 
break;
case 23:
 this.$ = yy.typeFactory.getDouble();  
break;
case 24:
 this.$ = yy.typeFactory.getChar();    
break;
case 25:
 this.$ = yy.typeFactory.getBoolean(); 
break;
case 32:

    this.$ = new ParameterStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1], $$[$0]
    );
  
break;
case 33:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 34:

    this.$ = new BlockStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), []
    );
  
break;
case 41:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-4], $$[$0-1]
    );
  
break;
case 42:

    this.$ = new DoWhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-5], $$[$0-2]
    );
  
break;
case 43:

    this.$ = new WhileStm(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 44:

    $$[$0-2].push(new SubIf(
      new NodeInfo(
        yy.filename, _$[$0-2].first_line, _$[$0-2].first_column
      ), $$[$0]));
    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0-2]
      );
  
break;
case 45:

    this.$ = new IfStm(
        new NodeInfo(yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1), $$[$0]
      );
  
break;
case 46:

    this.$ = $$[$0-6];
    this.$.push(new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2]));
  
break;
case 47:

    this.$ = [new SubIf(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0], $$[$0-2])];
  
break;
case 48:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-1]
    );
  
break;
case 49:

    this.$ = new Print(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2]
    );
  
break;
case 50:

    this.$ = new And(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], $$[$0]
    );
  
break;
case 51:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "^^", $$[$0]
    );
  
break;
case 52:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "+", $$[$0]
    );
  
break;
case 53:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "-", $$[$0]
    );
  
break;
case 54:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "*", $$[$0]
    );
  
break;
case 55:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "/", $$[$0]
    );
  
break;
case 56:

    this.$ = new Arithmetic(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "%", $$[$0]
    );
  
break;
case 57:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">", $$[$0]
    )
  
break;
case 58:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], ">=", $$[$0]
    )
  
break;
case 59:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<", $$[$0]
    )
  
break;
case 60:

    this.$ = new Relational(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0-2], "<=", $$[$0]
    )
  
break;
case 61:
 this.$ = $$[$0-1]; 
break;
case 62:

    this.$ = new UMenos(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), $$[$0]
    )
  
break;
case 63:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getString(), $$[$0]
    );
  
break;
case 64:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getDouble(), Number($$[$0])
    );
  
break;
case 65:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getInteger(), Number($$[$0])
    );
  
break;
case 66:

    this.$ = new Literal(
      new NodeInfo(
        yy.filename, yylineno + 1, yy.lexer.yylloc.first_column + 1
      ), yy.typeFactory.getBoolean(), $$[$0].toLowerCase() === "true"
    );
  
break;
case 67:

  
break;
}
},
table: [{3:1,4:2,5:3,7:[1,4],12:5,13:6,14:7,15:8,16:$V0,21:$V1,22:$V2,23:$V3,24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7},{1:[3]},{5:19,12:5,13:6,14:7,15:8,16:$V0,21:$V1,22:$V2,23:$V3,24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7},{6:[1,20],12:21,13:6,14:7,15:8,16:$V0,21:$V1,22:$V2,23:$V3,24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7},{8:22,11:[1,23]},o($V8,[2,8]),o($V8,[2,9]),{15:24,16:$V0,21:[1,25],24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7},{16:[1,26]},{16:[1,27]},o($V9,[2,18]),o($V9,[2,19]),{16:[2,20]},{16:[2,21]},{16:[2,22]},{16:[2,23]},{16:[2,24]},{16:[2,25]},{16:[2,26]},{6:[1,28],12:21,13:6,14:7,15:8,16:$V0,21:$V1,22:$V2,23:$V3,24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7},{1:[2,2]},o($V8,[2,7]),o($Va,[2,3],{9:[1,29],10:[1,30]}),o($Vb,[2,6]),{16:[1,31]},{16:[1,32]},{17:[1,33]},{17:[1,34]},{1:[2,1]},o($Va,[2,4]),{11:[1,35]},{17:[1,36]},{17:[1,37]},{15:41,16:$V0,18:38,19:[1,39],24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7,33:40},{15:41,16:$V0,18:42,19:[1,43],24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7,33:40},o($Vb,[2,5]),{15:41,16:$V0,18:44,19:[1,45],24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7,33:40},{15:41,16:$V0,18:46,19:[1,47],24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7,33:40},{10:$Vc,19:[1,48]},{20:50,34:$Vd},o($Ve,[2,31]),{16:[1,52]},{10:$Vc,19:[1,53]},{20:54,34:$Vd},{10:$Vc,19:[1,55]},{20:56,34:$Vd},{10:$Vc,19:[1,57]},{20:58,34:$Vd},{20:59,34:$Vd},{15:41,16:$V0,24:12,25:13,26:$V4,27:$V5,28:$V6,29:$V7,33:60},o($V8,[2,15]),{35:61,36:[1,62],37:63,38:64,39:65,40:66,41:67,42:$Vf,43:$Vg,45:69,47:$Vh,48:$Vi},o($Ve,[2,32]),{20:73,34:$Vd},o($V8,[2,17]),{20:74,34:$Vd},o($V8,[2,11]),{20:75,34:$Vd},o($V8,[2,13]),o($V8,[2,14]),o($Ve,[2,30]),{36:[1,76],37:77,38:64,39:65,40:66,41:67,42:$Vf,43:$Vg,45:69,47:$Vh,48:$Vi},o($Vj,[2,34]),o($Vk,[2,36]),o($Vk,[2,37]),o($Vk,[2,38]),o($Vk,[2,39]),o($Vk,[2,40]),{17:[1,78]},o($Vk,[2,45],{46:[1,79]}),{17:[1,80]},{20:81,34:$Vd},{17:[1,82]},o($V8,[2,16]),o($V8,[2,10]),o($V8,[2,12]),o($Vj,[2,33]),o($Vk,[2,35]),{16:$Vl,17:$Vm,44:83,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{20:91,34:$Vd,47:[1,92]},{16:$Vl,17:$Vm,44:93,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{43:[1,94]},{16:$Vl,17:$Vm,44:95,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{19:[1,96],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},{16:$Vl,17:$Vm,44:108,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:109,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},o($VD,[2,63]),o($VD,[2,64]),o($VD,[2,65]),o($VD,[2,66]),o($VD,[2,67]),o($Vk,[2,44]),{17:[1,110]},{19:[1,111],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},{17:[1,112]},{19:[1,113],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},o($Vk,[2,48],{9:[1,114]}),{16:$Vl,17:$Vm,44:115,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:116,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:117,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:118,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:119,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:120,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:121,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:122,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:123,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:124,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{16:$Vl,17:$Vm,44:125,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{19:[1,126],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},o($VD,[2,62]),{16:$Vl,17:$Vm,44:127,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{20:128,34:$Vd},{16:$Vl,17:$Vm,44:129,52:$Vn,60:$Vo,61:$Vp,62:$Vq,63:$Vr},{20:130,34:$Vd},o($Vk,[2,49]),o($VE,[2,50],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VF,[2,51],{50:$Vt}),o($VG,[2,52],{50:$Vt,53:$Vw,54:$Vx,55:$Vy}),o($VG,[2,53],{50:$Vt,53:$Vw,54:$Vx,55:$Vy}),o($VF,[2,54],{50:$Vt}),o($VF,[2,55],{50:$Vt}),o($VF,[2,56],{50:$Vt}),o($VE,[2,57],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy}),o($VE,[2,58],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy}),o($VE,[2,59],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy}),o($VE,[2,60],{50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy}),o($VD,[2,61]),{19:[1,131],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},o($Vk,[2,43]),{19:[1,132],49:$Vs,50:$Vt,51:$Vu,52:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC},o($VH,[2,47]),{20:133,34:$Vd},o($Vk,[2,41],{9:[1,134]}),o($VH,[2,46]),o($Vk,[2,42])],
defaultActions: {12:[2,20],13:[2,21],14:[2,22],15:[2,23],16:[2,24],17:[2,25],18:[2,26],20:[2,2],28:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { default: Ast } = require("../ast/ast");  
  const { default: NodeInfo } = require("../scope/node_info");
  const { default: ImportStm } = require("../ast/statement/import");
  const { default: Print } = require("../ast/statement/print");
  const { default: Arithmetic } = require("../ast/expression/arithmetic");
  const { default: Relational } = require("../ast/expression/relational");
  const { default: And } = require("../ast/expression/and");
  const { default: UMenos } = require("../ast/expression/umenos");
  const { default: Literal } = require("../ast/expression/literal");
  const { default: FunctionStm } = require("../ast/statement/function");
  const { default: ParameterStm } = require("../ast/statement/parameter");
  const { default: BlockStm } = require("../ast/statement/block");
  const { default: IfStm } = require("../ast/statement/if_statement");
  const { default: SubIf } = require("../ast/statement/sub_if");
  const { default: WhileStm } = require("../ast/statement/while");
  const { default: DoWhileStm } = require("../ast/statement/do_while");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Ignore blank spaces */ 
break;
case 1: this.pushState("TRADITIONAL_COMMENT"); 
break;
case 2: this.popState(); 
break;
case 3: this.popState(); 
break;
case 4: /* Ignore anything */ 
break;
case 5: this.pushState("END_OF_LINE_COMMENT"); 
break;
case 6: this.popState(); 
break;
case 7: /* Ignore */ 
break;
case 8: return "import"; 
break;
case 9: return "switch"; 
break;
case 10: return "continue"; 
break;
case 11: return "private"; 
break;
case 12: return "define"; 
break;
case 13: return "try"; 
break;
case 14: return "integer"; 
break;
case 15: return "var"; 
break;
case 16: return "case"; 
break;
case 17: return "return"; 
break;
case 18: return "void"; 
break;
case 19: return "as"; 
break;
case 20: return "catch"; 
break;
case 21: return "double"; 
break;
case 22: return "const"; 
break;
case 23: return "if"; 
break;
case 24: return "default"; 
break;
case 25: return "print"; 
break;
case 26: return "for"; 
break;
case 27: return "strc"; 
break;
case 28: return "throw"; 
break;
case 29: return "char"; 
break;
case 30: return "global"; 
break;
case 31: return "else"; 
break;
case 32: return "break"; 
break;
case 33: return "public"; 
break;
case 34: return "while"; 
break;
case 35: return "do"; 
break;
case 36: return "boolean"; 
break;
case 37: return "BOOLEAN_LITERAL";   
break;
case 38: return "DOUBLE_LITERAL";    
break;
case 39: return "INTEGER_LITERAL";   
break;
case 40: stringBuilder.length = 0; this.begin("CHAR");   
break;
case 41:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "CHAR_LITERAL";
                                  
break;
case 42: stringBuilder.push("'");   
break;
case 43: stringBuilder.push("\"");   
break;
case 44: stringBuilder.push("\\");   
break;
case 45: stringBuilder.push("\n");   
break;
case 46: stringBuilder.push("\r");   
break;
case 47: stringBuilder.push("\t");   
break;
case 48: stringBuilder.push(yy_.yytext); 
break;
case 49:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 50: stringBuilder.push(yy_.yytext); 
break;
case 51: stringBuilder.length = 0; this.begin("STRING"); 
break;
case 52:
                                    this.popState(); yy_.yytext = stringBuilder.join("");
                                    return "STRING_LITERAL";
                                  
break;
case 53: stringBuilder.push("\"");   
break;
case 54: stringBuilder.push("\\");   
break;
case 55: stringBuilder.push("\n");   
break;
case 56: stringBuilder.push("\r");   
break;
case 57: stringBuilder.push("\t");   
break;
case 58: stringBuilder.push(yy_.yytext); 
break;
case 59:
                                    this.popState();
                                    return "ILLEGAL_CHARACTER";
                                  
break;
case 60: stringBuilder.push(yy_.yytext); 
break;
case 61: return "FILE"; 
break;
case 62: return "IDENTIFIER"; 
break;
case 63: return "^^"; 
break;
case 64: return "++"; 
break;
case 65: return "--"; 
break;
case 66: return "!="; 
break;
case 67: return "=="; 
break;
case 68: return ">="; 
break;
case 69: return "<="; 
break;
case 70: return "&&"; 
break;
case 71: return "||"; 
break;
case 72: return "+"; 
break;
case 73: return "-"; 
break;
case 74: return "*"; 
break;
case 75: return "/"; 
break;
case 76: return "%"; 
break;
case 77: return "="; 
break;
case 78: return ">"; 
break;
case 79: return "<"; 
break;
case 80: return "?"; 
break;
case 81: return ":"; 
break;
case 82: return "^"; 
break;
case 83: return "!"; 
break;
case 84: return "("; 
break;
case 85: return ")"; 
break;
case 86: return "["; 
break;
case 87: return "]"; 
break;
case 88: return "{"; 
break;
case 89: return "}"; 
break;
case 90: return ","; 
break;
case 91: return "?"; 
break;
case 92: return ":"; 
break;
case 93: return ";"; 
break;
case 94: return "."; 
break;
case 95: return "EOF"; 
break;
case 96: return "ILLEGAL_CHARACTER"; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:$)/i,/^(?:[^])/i,/^(?:\/\/)/i,/^(?:(\r|\n|\r\n))/i,/^(?:.)/i,/^(?:import\b)/i,/^(?:switch\b)/i,/^(?:continue\b)/i,/^(?:private\b)/i,/^(?:define\b)/i,/^(?:try\b)/i,/^(?:integer\b)/i,/^(?:var\b)/i,/^(?:case\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:as\b)/i,/^(?:catch\b)/i,/^(?:double\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:default\b)/i,/^(?:print\b)/i,/^(?:for\b)/i,/^(?:strc\b)/i,/^(?:throw\b)/i,/^(?:char\b)/i,/^(?:global\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:public\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:boolean\b)/i,/^(?:(true|false\b))/i,/^(?:([0-9]+(\.[0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:')/i,/^(?:')/i,/^(?:\\\\')/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\v)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\'\\]+)/i,/^(?:")/i,/^(?:")/i,/^(?:\\")/i,/^(?:\\\\)/i,/^(?:\\n)/i,/^(?:\\r)/i,/^(?:\\t)/i,/^(?:\\.)/i,/^(?:(\r|\n|\r\n))/i,/^(?:[^\r\n\"\\]+)/i,/^(?:([a-zA-Z0-9_-]+(\.[A-Za-z0-9]+)+))/i,/^(?:([a-zA-Z_][_a-zA-Z0-9ñÑ]+))/i,/^(?:\^\^)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"CHAR":{"rules":[41,42,43,44,45,46,47,48,49,50],"inclusive":false},"STRING":{"rules":[52,53,54,55,56,57,58,59,60],"inclusive":false},"TRADITIONAL_COMMENT":{"rules":[2,3,4],"inclusive":false},"END_OF_LINE_COMMENT":{"rules":[6,7],"inclusive":false},"INITIAL":{"rules":[0,1,5,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,51,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
let stringBuilder = [];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}